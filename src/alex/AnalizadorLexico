package alex;

import errors.GestionErrores;

%%
%cup
%line
%class AnalizadorLexico
%unicode
%public
%char

%{
  private ALexOperations ops;
  private GestionErrores errores;
  public String lexema() {return yytext();}
  public int fila() {return yyline+1;}
  public int columna() {return yychar+1;}
  public void fijaGestionErrores(GestionErrores errores) {
   this.errores = errores;
  }
%}

%eofval{
  return ops.unidadEof();
%eofval}

%init{
  ops = new ALexOperations(this);
%init}

letra  = ([A-Z]|[a-z])
digitoPositivo = [1-9]
digito = ({digitoPositivo}|0)
parteEntera = {digitoPositivo}{digito}*
parteDecimal = {digito}* {digitoPositivo}
separador = [ \t\r\b]
saltoDeLinea = \n
comentario = #[^\n]* 
int = int
boolean = boolean
if = if
else = else
return = return
while = while
switch = switch
case = case
default = default
const = const
true = True
false = False
struct = struct
new = new
void = void

identificador = {letra}({letra}|{digito}|_)*
numeroEntero = [\+,\-]?({parteEntera}|0)

operadorSuma = \+
operadorResta = \-
operadorMultiplicacion = \*
operadorPotencia = \*\*
operadorDivision = /
operadorModulo = %

operadorAnd = &
operadorOr = \|
operadorNot = \!
operadorIgual = \=\=
operadorDistinto = \!\=
operadorLT = <
operadorGT = >
operadorLE = <=
operadorGE = >=

llaveApertura = \{
llaveCierre = \}
parentesisApertura = \(
parentesisCierre = \)
corcheteApertura = \[
corcheteCierre = \]

igual = \=
coma  = ,
puntoyComa = \;
puntero = \ยก

%%
{separador}               {}
{comentario}              {}
{saltoDeLinea}            {yychar=-1;}


{int}                     {return ops.unidadInt();}
{boolean}                 {return ops.unidadBoolean();}
{if}                      {return ops.unidadIf();}
{else}                    {return ops.unidadElse();}
{return}                  {return ops.unidadReturn();}
{while}                   {return ops.unidadWhile();}
{switch}                  {return ops.unidadSwitch();}
{case}                    {return ops.unidadCase();}
{default}                 {return ops.unidadDefault();}
{const}                   {return ops.unidadConst();}
{true}                    {return ops.unidadTrue();}
{false}                   {return ops.unidadFalse();}
{struct}				          {return ops.unidadStruct();}
{new}					            {return ops.unidadNew();}
{void}                    {return ops.unidadVoid();}

{identificador}           {return ops.unidadId();}
{numeroEntero}            {return ops.unidadEnt();}

{operadorSuma}            {return ops.unidadSuma();}
{operadorResta}           {return ops.unidadResta();}
{operadorMultiplicacion}  {return ops.unidadMul();}
{operadorPotencia}        {return ops.unidadPot();}
{operadorDivision}        {return ops.unidadDiv();}
{operadorModulo}		      {return ops.unidadMod();}

{operadorAnd}             {return ops.unidadAnd();}
{operadorOr}              {return ops.unidadOr();}
{operadorNot}             {return ops.unidadNot();}
{operadorIgual}           {return ops.unidadComparadorIgualdad();}
{operadorDistinto}        {return ops.unidadDistinto();}
{operadorLT}              {return ops.unidadLT();}
{operadorGT}              {return ops.unidadGT();}
{operadorLE}              {return ops.unidadLE();}
{operadorGE}              {return ops.unidadGE();}

{llaveApertura}           {return ops.unidadLLaveAp();}
{llaveCierre}     	      {return ops.unidadLLaveCierre();}
{corcheteApertura}        {return ops.unidadCorAp();}
{corcheteCierre}          {return ops.unidadCorCierre();}
{parentesisApertura}      {return ops.unidadPAp();}
{parentesisCierre}        {return ops.unidadPCierre();}
{igual}                   {return ops.unidadIgual();} 
{coma}                    {return ops.unidadComa();}
{puntoyComa}              {return ops.unidadPuntoComa();}
{puntero}	        			  {return ops.unidadPuntero();}

[^]                       {ops.error();}  