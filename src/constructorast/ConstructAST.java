
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 03 22:44:49 CEST 2021
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErrores;
import ast.E.*;
import ast.AS;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 03 22:44:49 CEST 2021
  */
public class ConstructAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\013\005\000\002\002\004\000\002\013" +
    "\003\000\002\014\004\000\002\015\006\000\002\015\004" +
    "\000\002\015\007\000\002\015\006\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\006\000\002\020" +
    "\002\000\002\020\004\000\002\022\005\000\002\022\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\010\000\004\017\004\001\002\000\004\017\004\001" +
    "\002\000\006\002\uffff\034\uffff\001\002\000\006\002\010" +
    "\034\007\001\002\000\004\017\004\001\002\000\004\002" +
    "\000\001\002\000\006\002\001\034\001\001\002\000\006" +
    "\002\ufffe\034\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\010\000\006\013\005\014\004\001\001\000\004\014" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructAST$actions {


   private AS as = new AS();

  private final ConstructAST parser;

  /** Constructor */
  CUP$ConstructAST$actions(ConstructAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructAST$do_action_part00000000(
    int                        CUP$ConstructAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructAST$parser,
    java.util.Stack            CUP$ConstructAST$stack,
    int                        CUP$ConstructAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // E5 ::= E5 POT E6 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue pot = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.pot(e1, e2, pot.getFila(), pot.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E5",9, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= E5 EOF 
            {
              Object RESULT =null;
		E start_val = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructAST$parser.done_parsing();
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E5 ::= E6 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=e1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E5",9, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E6 ::= NOT E6 
            {
              E RESULT =null;
		TokenValue not = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.not(e1, not.getFila(), not.getColumna());:)};
E6 ::= E7:e1
{:RESULT=e1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E6",10, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E7 ::= E7 COR_A E0 COR_C 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;
		TokenValue ca = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT=as.corchete(e1, e2, ca.getFila(), ca.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E7 ::= PUNTERO E9 
            {
              E RESULT =null;
		TokenValue punt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = as.dolar(op1, puntero.getFila(), puntero.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E7 ::= NEW TIPO COR_A E0 COR_C 
            {
              E RESULT =null;
		TokenValue nuevo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-4)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;
		E tam = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT = as.nuevo(tipo, tam, nuevo.getFila(), nuevo.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E7 ::= NEW TIPO COR_A COR_C 
            {
              E RESULT =null;
		TokenValue nuevo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		RESULT = as.nuevo(
   tipo, as.ent("1", nuevo.getFila(), nuevo.getColumna()), 
   nuevo.getFila(), nuevo.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E7 ::= E8 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=op1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E7",11, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E8 ::= ENT 
            {
              E RESULT =null;
		TokenValue e1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.ent(e1.getLexema(), e1.getFila(), e1.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E8",12, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E8 ::= IDEN 
            {
              E RESULT =null;
		TokenValue e1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.iden(e1.getLexema(), e1.getFila(), e1.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E8",12, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E8 ::= PAREN_A E0 PAREN_C 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT=e1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E8",12, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E8 ::= TRUE 
            {
              E RESULT =null;
		TokenValue tru = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.verdadero(tru.getFila(), tru.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E8",12, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E8 ::= FALSE 
            {
              E RESULT =null;
		TokenValue fal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.falso(fal.getFila(), fal.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E8",12, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E8 ::= IDEN PAREN_A LIST_ARG PAREN_C 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;
		List<E> args = (List<E>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		TokenValue pc = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.llamadaFuncion(as.iden(id.getLexema(), id.getFila(), id.getColumna()), args, pc.getFila(), pc.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("E8",12, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LIST_ARG ::= 
            {
              List<E> RESULT =null;
		RESULT=new ArrayList<E>();
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("LIST_ARG",14, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LIST_ARG ::= E0 ARG 
            {
              List<E> RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		List<E> e2 = (List<E>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		e2.add(0, e1); RESULT=e2;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("LIST_ARG",14, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARG ::= COMA E0 ARG 
            {
              List<E> RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		List<E> e2 = (List<E>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		e2.add(0, e1); RESULT=e2;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("ARG",16, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARG ::= 
            {
              List<E> RESULT =null;
		RESULT=new ArrayList<E>();
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("ARG",16, RESULT);
            }
          return CUP$ConstructAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructAST$do_action(
    int                        CUP$ConstructAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructAST$parser,
    java.util.Stack            CUP$ConstructAST$stack,
    int                        CUP$ConstructAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructAST$do_action_part00000000(
                               CUP$ConstructAST$act_num,
                               CUP$ConstructAST$parser,
                               CUP$ConstructAST$stack,
                               CUP$ConstructAST$top);
    }
}

