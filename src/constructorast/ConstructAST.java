
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Apr 16 11:28:51 CEST 2021
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexico;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErrores;
import ast.E.*;
import ast.I.*;
import ast.T.*;
import ast.AS;
import java.util.List;
import javafx.util.Pair;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Apr 16 11:28:51 CEST 2021
  */
public class ConstructAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\025\004\000\002\002\004\000\002\025" +
    "\002\000\002\005\005\000\002\005\003\000\002\006\005" +
    "\000\002\006\003\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\003\000\002\012\005\000" +
    "\002\012\003\000\002\013\004\000\002\013\003\000\002" +
    "\014\006\000\002\014\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\005\000\002\015\003\000\002\015\003" +
    "\000\002\002\003\000\002\002\003\000\002\003\003\000" +
    "\002\003\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\021" +
    "\006\000\002\020\011\000\002\020\015\000\002\022\011" +
    "\000\002\023\015\000\002\023\012\000\002\033\003\000" +
    "\002\033\002\000\002\034\005\000\002\035\006\000\002" +
    "\035\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\032\002\uffff\023\007\030\040\031\010\032" +
    "\023\036\011\037\027\042\005\043\016\044\013\047\006" +
    "\055\037\001\002\000\036\002\uffd9\023\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\035\uffd9\036\uffd9\037\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\046\uffd9\047\uffd9\055\uffd9\001\002\000\004\031" +
    "\uffdf\001\002\000\004\032\154\001\002\000\016\023\007" +
    "\030\040\031\010\032\023\036\011\037\027\001\002\000" +
    "\050\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\033\uffe5\041\uffe5" +
    "\001\002\000\050\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\033" +
    "\uffe3\041\uffe3\001\002\000\004\031\141\001\002\000\004" +
    "\032\127\001\002\000\036\002\uffff\023\007\030\040\031" +
    "\010\032\023\035\uffff\036\011\037\027\042\005\043\016" +
    "\044\013\046\uffff\047\006\055\037\001\002\000\004\031" +
    "\uffe0\001\002\000\004\031\uffde\001\002\000\004\002\125" +
    "\001\002\000\046\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\033\uffe7\041" +
    "\uffe7\001\002\000\036\002\uffdd\023\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\035\uffdd\036\uffdd\037\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\046\uffdd\047\uffdd\055\uffdd\001\002\000\046\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\024\122\033\uffe9\041\uffe9\001\002\000\016\023" +
    "\007\030\040\031\010\032\023\036\011\037\027\001\002" +
    "\000\044\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\033\uffeb\041\uffeb\001\002\000" +
    "\044\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\107\033\uffed\041\uffed\001\002\000\042" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\105\020\104" +
    "\021\103\033\ufff1\041\ufff1\001\002\000\050\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\033\uffe2\041\uffe2\001\002\000\034" +
    "\004\ufff4\005\ufff4\006\073\007\077\010\076\011\070\012" +
    "\071\013\074\014\ufff4\015\072\016\075\033\ufff4\041\ufff4" +
    "\001\002\000\014\004\ufffb\005\066\014\ufffb\033\ufffb\041" +
    "\ufffb\001\002\000\012\004\064\014\ufffd\033\ufffd\041\ufffd" +
    "\001\002\000\036\002\uffdb\023\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\046\uffdb\047\uffdb\055\uffdb\001\002\000\004\014\061\001" +
    "\002\000\004\031\uffe1\001\002\000\036\002\uffdc\023\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\035\uffdc\036\uffdc\037\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\046\uffdc\047\uffdc\055\uffdc\001\002" +
    "\000\004\031\042\001\002\000\050\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\024" +
    "\uffe6\025\uffe6\033\uffe6\041\uffe6\001\002\000\036\002\uffda" +
    "\023\uffda\030\uffda\031\uffda\032\uffda\035\uffda\036\uffda\037" +
    "\uffda\042\uffda\043\uffda\044\uffda\046\uffda\047\uffda\055\uffda" +
    "\001\002\000\004\032\043\001\002\000\010\033\uffd1\042" +
    "\005\043\016\001\002\000\004\031\053\001\002\000\004" +
    "\033\047\001\002\000\004\033\uffd2\001\002\000\004\034" +
    "\050\001\002\000\032\023\007\030\040\031\010\032\023" +
    "\035\uffff\036\011\037\027\042\005\043\016\044\013\047" +
    "\006\055\037\001\002\000\004\035\052\001\002\000\036" +
    "\002\uffd3\023\uffd3\030\uffd3\031\uffd3\032\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3" +
    "\055\uffd3\001\002\000\006\033\uffce\040\054\001\002\000" +
    "\006\042\005\043\016\001\002\000\004\033\uffd0\001\002" +
    "\000\004\031\057\001\002\000\006\033\uffce\040\054\001" +
    "\002\000\004\033\uffcf\001\002\000\016\023\007\030\040" +
    "\031\010\032\023\036\011\037\027\001\002\000\004\041" +
    "\063\001\002\000\036\002\uffd8\023\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\035\uffd8\036\uffd8\037\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\046\uffd8\047\uffd8\055\uffd8\001\002\000\016\023\007" +
    "\030\040\031\010\032\023\036\011\037\027\001\002\000" +
    "\010\014\ufffe\033\ufffe\041\ufffe\001\002\000\016\023\007" +
    "\030\040\031\010\032\023\036\011\037\027\001\002\000" +
    "\012\004\ufffc\014\ufffc\033\ufffc\041\ufffc\001\002\000\016" +
    "\023\007\030\040\031\010\032\023\036\011\037\027\001" +
    "\002\000\016\023\007\030\040\031\010\032\023\036\011" +
    "\037\027\001\002\000\016\023\007\030\040\031\010\032" +
    "\023\036\011\037\027\001\002\000\016\023\007\030\040" +
    "\031\010\032\023\036\011\037\027\001\002\000\016\023" +
    "\007\030\040\031\010\032\023\036\011\037\027\001\002" +
    "\000\016\023\007\030\040\031\010\032\023\036\011\037" +
    "\027\001\002\000\016\023\007\030\040\031\010\032\023" +
    "\036\011\037\027\001\002\000\016\023\007\030\040\031" +
    "\010\032\023\036\011\037\027\001\002\000\020\004\ufff9" +
    "\005\ufff9\014\ufff9\015\072\016\075\033\ufff9\041\ufff9\001" +
    "\002\000\020\004\ufff8\005\ufff8\014\ufff8\015\072\016\075" +
    "\033\ufff8\041\ufff8\001\002\000\042\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\105\020\104\021\103\033\ufff2\041" +
    "\ufff2\001\002\000\016\023\007\030\040\031\010\032\023" +
    "\036\011\037\027\001\002\000\016\023\007\030\040\031" +
    "\010\032\023\036\011\037\027\001\002\000\016\023\007" +
    "\030\040\031\010\032\023\036\011\037\027\001\002\000" +
    "\044\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\107\033\ufff0\041\ufff0\001\002\000\016" +
    "\023\007\030\040\031\010\032\023\036\011\037\027\001" +
    "\002\000\044\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\033\uffec\041\uffec\001\002" +
    "\000\044\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\107\033\uffef\041\uffef\001\002\000" +
    "\044\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\107\033\uffee\041\uffee\001\002\000\020" +
    "\004\ufff5\005\ufff5\014\ufff5\015\072\016\075\033\ufff5\041" +
    "\ufff5\001\002\000\020\004\ufffa\005\ufffa\014\ufffa\015\072" +
    "\016\075\033\ufffa\041\ufffa\001\002\000\042\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\105\020\104\021\103\033" +
    "\ufff3\041\ufff3\001\002\000\020\004\ufff6\005\ufff6\014\ufff6" +
    "\015\072\016\075\033\ufff6\041\ufff6\001\002\000\020\004" +
    "\ufff7\005\ufff7\014\ufff7\015\072\016\075\033\ufff7\041\ufff7" +
    "\001\002\000\004\033\121\001\002\000\050\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\024\uffe4\025\uffe4\033\uffe4\041\uffe4\001\002\000\014" +
    "\030\040\031\010\032\023\036\011\037\027\001\002\000" +
    "\004\025\124\001\002\000\046\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8" +
    "\033\uffe8\041\uffe8\001\002\000\004\002\000\001\002\000" +
    "\010\002\001\035\001\046\001\001\002\000\016\023\007" +
    "\030\040\031\010\032\023\036\011\037\027\001\002\000" +
    "\004\033\131\001\002\000\004\034\132\001\002\000\032" +
    "\023\007\030\040\031\010\032\023\035\uffff\036\011\037" +
    "\027\042\005\043\016\044\013\047\006\055\037\001\002" +
    "\000\004\035\134\001\002\000\040\002\uffd7\023\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\035\uffd7\036\uffd7\037\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\135\046\uffd7\047\uffd7\055\uffd7\001" +
    "\002\000\004\034\136\001\002\000\032\023\007\030\040" +
    "\031\010\032\023\035\uffff\036\011\037\027\042\005\043" +
    "\016\044\013\047\006\055\037\001\002\000\004\035\140" +
    "\001\002\000\036\002\uffd6\023\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\046\uffd6\047\uffd6\055\uffd6\001\002\000\004\032\142\001" +
    "\002\000\010\033\uffd1\042\005\043\016\001\002\000\004" +
    "\033\144\001\002\000\004\034\145\001\002\000\032\023" +
    "\007\030\040\031\010\032\023\036\011\037\027\042\005" +
    "\043\016\044\013\046\uffff\047\006\055\037\001\002\000" +
    "\004\046\147\001\002\000\016\023\007\030\040\031\010" +
    "\032\023\036\011\037\027\001\002\000\004\041\151\001" +
    "\002\000\004\035\152\001\002\000\036\002\uffd4\023\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\035\uffd4\036\uffd4\037\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\055\uffd4\001\002" +
    "\000\044\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\033\uffea\041\uffea\001\002\000" +
    "\016\023\007\030\040\031\010\032\023\036\011\037\027" +
    "\001\002\000\004\033\156\001\002\000\004\034\157\001" +
    "\002\000\032\023\007\030\040\031\010\032\023\035\uffff" +
    "\036\011\037\027\042\005\043\016\044\013\047\006\055" +
    "\037\001\002\000\004\035\161\001\002\000\036\002\uffd5" +
    "\023\uffd5\030\uffd5\031\uffd5\032\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5\047\uffd5\055\uffd5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\050\002\011\003\014\004\034\005\033\006" +
    "\031\007\030\010\027\011\025\012\024\013\023\014\021" +
    "\015\017\017\013\020\020\021\035\022\032\023\040\024" +
    "\003\025\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\152\014\021\015\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\002\011\003\014\004\034\005" +
    "\033\006\031\007\030\010\027\011\025\012\024\013\023" +
    "\014\021\015\017\017\013\020\020\021\035\022\032\023" +
    "\040\024\003\025\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\117\006\031\007\030" +
    "\010\027\011\025\012\024\013\023\014\021\015\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\043" +
    "\003\014\004\034\033\044\034\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\002\011\003\014\004\034\005\033\006\031\007" +
    "\030\010\027\011\025\012\024\013\023\014\021\015\017" +
    "\017\013\020\020\021\035\022\032\023\040\024\003\025" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\054\001\001\000\010\002\055\003\014\004\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\057" +
    "\001\001\000\002\001\001\000\024\005\061\006\031\007" +
    "\030\010\027\011\025\012\024\013\023\014\021\015\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\064\006\031\007\030\010\027\011\025\012\024\013\023" +
    "\014\021\015\017\001\001\000\002\001\001\000\022\006" +
    "\066\007\030\010\027\011\025\012\024\013\023\014\021" +
    "\015\017\001\001\000\002\001\001\000\016\010\116\011" +
    "\025\012\024\013\023\014\021\015\017\001\001\000\016" +
    "\010\115\011\025\012\024\013\023\014\021\015\017\001" +
    "\001\000\014\011\114\012\024\013\023\014\021\015\017" +
    "\001\001\000\016\010\113\011\025\012\024\013\023\014" +
    "\021\015\017\001\001\000\016\010\112\011\025\012\024" +
    "\013\023\014\021\015\017\001\001\000\014\011\101\012" +
    "\024\013\023\014\021\015\017\001\001\000\016\010\100" +
    "\011\025\012\024\013\023\014\021\015\017\001\001\000" +
    "\016\010\077\011\025\012\024\013\023\014\021\015\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\111\013\023\014\021\015\017\001\001" +
    "\000\012\012\110\013\023\014\021\015\017\001\001\000" +
    "\012\012\105\013\023\014\021\015\017\001\001\000\002" +
    "\001\001\000\010\013\107\014\021\015\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\127" +
    "\006\031\007\030\010\027\011\025\012\024\013\023\014" +
    "\021\015\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\002\011\003\014\004\034\005\033\006\031\007" +
    "\030\010\027\011\025\012\024\013\023\014\021\015\017" +
    "\017\013\020\020\021\035\022\032\023\040\024\003\025" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\011\003\014\004\034\005\033\006" +
    "\031\007\030\010\027\011\025\012\024\013\023\014\021" +
    "\015\017\017\013\020\020\021\035\022\032\023\040\024" +
    "\003\025\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\043\003\014\004\034\033" +
    "\142\034\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\002\011\003\014\004\034\005\033\006\031\007" +
    "\030\010\027\011\025\012\024\013\023\014\021\015\017" +
    "\017\013\020\020\021\035\022\032\023\040\024\003\025" +
    "\145\001\001\000\002\001\001\000\024\005\147\006\031" +
    "\007\030\010\027\011\025\012\024\013\023\014\021\015" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\154\006\031\007" +
    "\030\010\027\011\025\012\024\013\023\014\021\015\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\002" +
    "\011\003\014\004\034\005\033\006\031\007\030\010\027" +
    "\011\025\012\024\013\023\014\021\015\017\017\013\020" +
    "\020\021\035\022\032\023\040\024\003\025\157\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructAST$actions {


   private AS as = new AS();

  private final ConstructAST parser;

  /** Constructor */
  CUP$ConstructAST$actions(ConstructAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructAST$do_action_part00000000(
    int                        CUP$ConstructAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructAST$parser,
    java.util.Stack            CUP$ConstructAST$stack,
    int                        CUP$ConstructAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Start ::= Inst Start 
            {
              List<I> RESULT =null;
		I inst = (I)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		List<I> lista_inst = (List<I>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		lista_inst.add(0,inst); RESULT = lista_inst;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Start",19, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Start EOF 
            {
              Object RESULT =null;
		List<I> start_val = (List<I>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructAST$parser.done_parsing();
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Start ::= 
            {
              List<I> RESULT =null;
		RESULT= new ArrayList<I>();
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Start",19, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp0 ::= Exp1 OR Exp0 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue or = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = as.or(op1, op2, or.getFila(), or.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp0",3, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp0 ::= Exp1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = op1; 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp0",3, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Exp1 ::= Exp2 AND Exp1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue and = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.and(op1, op2, and.getFila(), and.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp1",4, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = op1; 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp1",4, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp2 ::= Exp3 IGUALIGUAL Exp3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue ig = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = as.igualIgual(op1, op2, ig.getFila(), ig.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp2",5, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp2 ::= Exp3 MAYOR Exp3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue ma = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = as.mayor(op1, op2, ma.getFila(), ma.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp2",5, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp2 ::= Exp3 MENOR Exp3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue me = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = as.menor(op1, op2, me.getFila(), me.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp2",5, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp2 ::= Exp3 MAYORIGUAL Exp3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue mi = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = as.mayorIgual(op1, op2, mi.getFila(), mi.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp2",5, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp2 ::= Exp3 MENORIGUAL Exp3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue mi = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = as.menorIgual(op1, op2, mi.getFila(), mi.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp2",5, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp2 ::= Exp3 DISTINTO Exp3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue dist = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = as.distinto(op1, op2, dist.getFila(), dist.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp2",5, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E op = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = op; 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp2",5, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp3 ::= Exp3 MAS Exp4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue mas = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.suma(op1, op2, mas.getFila(), mas.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp3",6, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp3 ::= Exp3 MENOS Exp4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue menos = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.resta(op1, op2, menos.getFila(), menos.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp3",6, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=op1; 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp3",6, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp4 ::= Exp4 POR Exp5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue por = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.mul(op1, op2, por.getFila(), por.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp4",7, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp4 ::= Exp4 DIV Exp5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue div = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.div(op1, op2, div.getFila(), div.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp4",7, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp4 ::= Exp4 MOD Exp5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue mod = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.mod(op1, op2, mod.getFila(), mod.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp4",7, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=e1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp4",7, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp5 ::= Exp5 POT Exp6 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue pot = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.pot(e1, e2, pot.getFila(), pot.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp5",8, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp5 ::= Exp6 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=e1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp5",8, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp6 ::= NOT Exp6 
            {
              E RESULT =null;
		TokenValue not = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.not(e1, not.getFila(), not.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp6",9, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp6 ::= Exp7 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=e1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp6",9, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp7 ::= Exp7 COR_A Exp8 COR_C 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;
		TokenValue ca = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		TokenValue cc = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.corchete(e1, e2, ca.getFila(), ca.getColumna()); 
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp7 ::= Exp8 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=op1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp7",10, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp8 ::= ENT 
            {
              E RESULT =null;
		TokenValue e1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.ent(e1.getLexema(), e1.getFila(), e1.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp8",11, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp8 ::= IDEN 
            {
              E RESULT =null;
		TokenValue e1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.iden(e1.getLexema(), e1.getFila(), e1.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp8",11, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp8 ::= PAREN_A Exp0 PAREN_C 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT=e1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp8",11, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp8 ::= TRUE 
            {
              E RESULT =null;
		TokenValue tru = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.verdadero(tru.getFila(), tru.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp8",11, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp8 ::= FALSE 
            {
              E RESULT =null;
		TokenValue fal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=as.falso(fal.getFila(), fal.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp8",11, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Tipo ::= TipoArray 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = t;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Tipo",0, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Tipo ::= TipoBasico 
            {
              Tipo RESULT =null;
		Tipo tb = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = tb;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Tipo",0, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TipoBasico ::= INT 
            {
              Tipo RESULT =null;
		RESULT = new TipoInt();
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("TipoBasico",1, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TipoBasico ::= BOOLEAN 
            {
              Tipo RESULT =null;
		RESULT = new TipoBoolean();
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("TipoBasico",1, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= InstIf 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = op1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Inst",13, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= InstAsig 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = op1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Inst",13, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst ::= InstWhile 
            {
              I RESULT =null;
		I op1 = (I)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = op1;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Inst",13, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inst ::= InstDeclFun 
            {
              I RESULT =null;
		I op = (I)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = op;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Inst",13, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Inst ::= InstCallVoidFun 
            {
              I RESULT =null;
		I op = (I)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT = op;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Inst",13, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InstAsig ::= Exp0 IGUAL Exp0 PUNTOCOMA 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;
		TokenValue igual = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		E valor = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT = as.instAsignacion(id, valor, igual.getFila(), igual.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("InstAsig",15, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InstIf ::= IF PAREN_A Exp0 PAREN_C LLAVE_A Start LLAVE_C 
            {
              I RESULT =null;
		TokenValue iff = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-6)).value;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-4)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT = as.instIf(condicion, cuerpo, null, iff.getFila(), iff.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("InstIf",14, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InstIf ::= IF PAREN_A Exp0 PAREN_C LLAVE_A Start LLAVE_C ELSE LLAVE_A Start LLAVE_C 
            {
              I RESULT =null;
		TokenValue iff = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-10)).value;
		E condicion = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-8)).value;
		List<I> cuerpo_if = (List<I>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-5)).value;
		List<I> cuerpo_else = (List<I>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT = as.instIf(condicion, cuerpo_if, cuerpo_else, iff.getFila(), iff.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("InstIf",14, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InstWhile ::= WHILE PAREN_A Exp0 PAREN_C LLAVE_A Start LLAVE_C 
            {
              I RESULT =null;
		TokenValue w = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-6)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-4)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT = as.instWhile(cond, cuerpo, w.getFila(), w.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("InstWhile",16, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InstDeclFun ::= Tipo IDEN PAREN_A ListTipoArg PAREN_C LLAVE_A Start RETURN Exp0 PUNTOCOMA LLAVE_C 
            {
              I RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-10)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-9)).value;
		List<Pair<Tipo,E>> arg = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-7)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-4)).value;
		E ret = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		RESULT = as.instDeclFun(tipo, as.iden(id.getLexema(), id.getFila(), id.getColumna()),arg, cuerpo, ret, id.getFila(), id.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("InstDeclFun",17, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InstDeclFun ::= VOID IDEN PAREN_A ListTipoArg PAREN_C LLAVE_A Start LLAVE_C 
            {
              I RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-6)).value;
		List<Pair<Tipo,E>> arg = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-4)).value;
		List<I> cuerpo = (List<I>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		RESULT = as.instDeclFun(null, as.iden(id.getLexema(), id.getFila(), id.getColumna()), arg, cuerpo, null, id.getFila(), id.getColumna());
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("InstDeclFun",17, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListTipoArg ::= PrimerTipoArg 
            {
              List<Pair<Tipo,E>> RESULT =null;
		List<Pair<Tipo,E>> a = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		RESULT=a;
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("ListTipoArg",25, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListTipoArg ::= 
            {
              List<Pair<Tipo,E>> RESULT =null;
		RESULT=new ArrayList<Pair<Tipo, E>>();
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("ListTipoArg",25, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PrimerTipoArg ::= Tipo IDEN TipoArgs 
            {
              List<Pair<Tipo,E>> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		List<Pair<Tipo,E>> otrosArgs = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		
    otrosArgs.add(0, new Pair<Tipo,E>(tipo, as.iden(nombre.getLexema(), nombre.getFila(), nombre.getColumna())));
    RESULT=otrosArgs;

              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("PrimerTipoArg",26, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TipoArgs ::= COMA Tipo IDEN TipoArgs 
            {
              List<Pair<Tipo,E>> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
		List<Pair<Tipo,E>> otrosArgs = (List<Pair<Tipo,E>>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
		
  otrosArgs.add(0, new Pair<Tipo,E>(tipo, as.iden(nombre.getLexema(), nombre.getFila(), nombre.getColumna())));
  RESULT=otrosArgs;

              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("TipoArgs",27, RESULT);
            }
          return CUP$ConstructAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TipoArgs ::= 
            {
              List<Pair<Tipo,E>> RESULT =null;
		RESULT=new ArrayList<Pair<Tipo, E>>();
              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("TipoArgs",27, RESULT);
            }
          return CUP$ConstructAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructAST$do_action(
    int                        CUP$ConstructAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructAST$parser,
    java.util.Stack            CUP$ConstructAST$stack,
    int                        CUP$ConstructAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructAST$do_action_part00000000(
                               CUP$ConstructAST$act_num,
                               CUP$ConstructAST$parser,
                               CUP$ConstructAST$stack,
                               CUP$ConstructAST$top);
    }
}

