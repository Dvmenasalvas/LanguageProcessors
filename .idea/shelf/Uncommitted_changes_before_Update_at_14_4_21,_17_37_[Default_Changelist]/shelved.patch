Index: src/constructorast/ConstructorAST.cup
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package constructorast;\r\n\r\nimport java_cup.runtime.*;\r\nimport alex.AnalizadorLexico;\r\nimport alex.UnidadLexica;\r\nimport alex.TokenValue;\r\nimport errors.GestionErrores;\r\nimport ast.E.*;\r\nimport ast.T.*;\r\nimport ast.AS;\r\n\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\n\r\nscan with {: return getScanner().next_token(); :};\r\naction code {:\r\n   private AS as = new AS();\r\n:};\r\nparser code {: \r\n   private GestionErrores errores;\r\n   public void syntax_error(Symbol unidadLexica) {\r\n     errores.errorSintactico((UnidadLexica)unidadLexica);\r\n   }\r\n:};\r\ninit with {: \r\n   errores = new GestionErrores();\r\n   AnalizadorLexico alex = (AnalizadorLexico)getScanner();\r\n   alex.fijaGestionErrores(errores);\r\n:};\r\n\r\n//1)Terminales y no terminales\r\n//1.1)Terminales\r\nterminal TokenValue OR, AND, IGUALIGUAL, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, DISTINTO, IGUAL,\r\nMAS, MENOS, POR, DIV, MOD, POT, NOT, COR_A, COR_C, PUNTERO, NEW,\r\nENT, IDEN, PAREN_A, PAREN_C, LLAVE_A, LLAVE_C,\r\nTRUE, FALSE, COMA, PUNTOCOMA, \r\nINT, BOOLEAN, IF, ELSE, RETURN, WHILE, SWITCH, CASE, DEFAULT,\r\nCONST, STRUCT, VOID;\r\n\r\n//1.2)No terminales\r\nnon terminal Tipo TIPO, TIPO_BASICO, TIPO_PUNTERO, TIPO_ARRAY; \r\nnon terminal E Exp0, Exp1, Exp2, Exp3, Exp4, Exp5, Exp6, Exp7, Exp8, Exp9;\r\nnon terminal List<E> LIST_ARG, CON_ARG, ARG, LIST_VAL, INIT_LIST_VAL;\r\n\r\n\r\n\r\n//3) Gramatica de expresiones (ordenada por precedencia de operadores de menos a más)\r\n\r\n//3.1) Operadores logicos\r\n//OR\r\nExp0 ::= Exp1: op1 OR:or Exp0: op2\r\n   {:RESULT = as.or(op1, op2, or.getFila(), or.getColumna()); :};\r\nExp0 ::= Exp1: op1\r\n   {:RESULT = op1; :};\r\n\r\n//AND\r\nExp1 ::= Exp2:op1 AND:and Exp1:op2\r\n   {:RESULT=as.and(op1, op2, and.getFila(), and.getColumna()); :};\r\nExp1 ::= Exp2: op1\r\n   {:RESULT = op1; :};\r\n\r\n\r\n\r\n//3.2) Operadores comparativos\r\n// ==\r\nExp2 ::= Exp3:op1 IGUALIGUAL:ig Exp3:op2 \r\n\t{:RESULT = as.igualIgual(op1, op2, ig.getFila(), ig.getColumna()); :};\r\n\r\n// >\r\nExp2 ::= Exp3:op1 MAYOR: ma Exp3:op2\r\n\t{:RESULT = as.mayor(op1, op2, ma.getFila(), ma.getColumna()); :}; \r\n\r\n// <\r\nExp2 ::= Exp3:op1 MENOR: me Exp3:op2 \r\n\t{:RESULT = as.menor(op1, op2, me.getFila(), me.getColumna()); :}; \r\n\r\n// >=\r\nExp2::= Exp3:op1 MAYORIGUAL: mi Exp3:op2\r\n\t{:RESULT = as.mayorIgual(op1, op2, mi.getFila(), mi.getColumna()); :}; \r\n\r\n// <=\r\nExp2::= Exp3:op1 MENORIGUAL: mi Exp3:op2\r\n\t{:RESULT = as.menorIgual(op1, op2, mi.getFila(), mi.getColumna()); :}; \r\n\r\n// !=\r\nExp2 ::= Exp3:op1 DISTINTO: dist Exp3:op2\r\n\t{:RESULT = as.distinto(op1, op2, dist.getFila(), dist.getColumna()); :}; \r\n\r\nExp2 ::= Exp3: op\r\n   {:RESULT = op; :};\r\n\r\n\r\n//3.3) Operadores aritmeticos\r\n\r\n//3.3.1) Suma y resta\r\n//+\r\nExp3 ::= Exp3:op1 MAS:mas Exp4:op2\r\n   {:RESULT=as.suma(op1, op2, mas.getFila(), mas.getColumna()); :};\r\n\r\n//-\r\nExp3 ::= Exp3:op1 MENOS:menos Exp4:op2\r\n   {:RESULT=as.resta(op1, op2, menos.getFila(), menos.getColumna()); :};\r\n\r\nExp3 ::= Exp4:op1\r\n   {:RESULT=op1; :};\r\n\r\n\r\n\r\n//3.3.2) Multiplicacion, division y modulo\r\n//*\r\nExp4 ::= Exp4:op1 POR:por Exp5:op2\r\n   {:RESULT=as.mul(op1, op2, por.getFila(), por.getColumna()); :};\r\n\r\n// /\r\nExp4 ::= Exp4:op1 DIV:div Exp5:op2\r\n   {:RESULT=as.div(op1, op2, div.getFila(), div.getColumna()); :};\r\n\r\nExp4 ::= Exp4 :op1 MOD:mod Exp5:op2\r\n   {:RESULT=as.mod(op1, op2, mod.getFila(), mod.getColumna()); :};\r\n\r\n\r\n//3.3.3) Potencia\r\nExp5 ::= Exp5:e1 POT:pot Exp6:e2\r\n{:RESULT=as.pot(e1, e2, pot.getFila(), pot.getColumna());:};\r\nExp5 ::= Exp6:e1\r\n{:RESULT=e1;:};\r\n\r\n//3.4) Negación\r\nExp6 ::= NOT:not Exp6:e1\r\n{:RESULT=as.not(e1, not.getFila(), not.getColumna());:};\r\nExp6 ::= Exp7:e1\r\n{:RESULT=e1;:};\r\n\r\n//3.5) Corchete, asterisco y new \r\nExp7 ::= Exp7:e1 COR_A:ca Exp0:e2 COR_C\r\n{:RESULT=as.corchete(e1, e2, ca.getFila(), ca.getColumna());:};\r\n\r\nExp7  ::= PUNTERO:punt Exp9:op1\r\n{:RESULT = as.dolar(op1, punt.getFila(), punt.getColumna());:};\r\nExp7\t::= NEW:nuevo TIPO:tipo COR_A Exp0:tam COR_C\r\n{:RESULT = as.nuevo(tipo, tam, nuevo.getFila(), nuevo.getColumna());:};\r\nExp7\t::= NEW:nuevo TIPO:tipo COR_A COR_C\r\n{:RESULT = as.nuevo(\r\n   tipo, as.ent(\"1\", nuevo.getFila(), nuevo.getColumna()), \r\n   nuevo.getFila(), nuevo.getColumna());:};\r\nExp7  ::= Exp8:op1\r\n{:RESULT=op1;:};\r\n\r\n//3.6) Terminales \r\nExp8  ::= ENT:e1\r\n{:RESULT=as.ent(e1.getLexema(), e1.getFila(), e1.getColumna());:};\r\nExp8  ::= IDEN:e1\r\n{:RESULT=as.iden(e1.getLexema(), e1.getFila(), e1.getColumna());:};\r\nExp8  ::= PAREN_A Exp0:e1 PAREN_C\r\n{:RESULT=e1;:};\r\nExp8  ::= TRUE:tru\r\n{:RESULT=as.verdadero(tru.getFila(), tru.getColumna());:};\r\nExp8  ::= FALSE:fal\r\n{:RESULT=as.falso(fal.getFila(), fal.getColumna());:};\r\n\r\n//3.7)Llamada a funcion como expresion\r\nExp8  ::= IDEN:id PAREN_A LIST_ARG:args PAREN_C:pc\r\n{:RESULT=as.llamadaFuncion(as.iden(id.getLexema(), id.getFila(), id.getColumna()), args, pc.getFila(), pc.getColumna());:};\r\n//Sin argumentos\r\nLIST_ARG ::=\r\n{:RESULT=new ArrayList<E>();:};\r\n//Con argumentos\r\nLIST_ARG ::= Exp0:e1 ARG:e2\r\n{:e2.add(0, e1); RESULT=e2;:};\r\nARG ::= COMA Exp0:e1 ARG:e2\r\n{:e2.add(0, e1); RESULT=e2;:};\r\nARG ::= \r\n{:RESULT=new ArrayList<E>();:};\r\n\r\n//4) Tipos\r\n\r\n//4.1) Tipos simples\r\nTIPO ::= TIPO_BASICO: tipoBasico\r\n   {:RESULT = tipoBasico; :};\r\n\r\n//INT\r\nTIPO_BASICO ::= INT: tipoBasico\r\n   {:RESULT = new TipoInt();:};\r\n\r\n//BOOL\r\nTIPO_BASICO ::= BOOLEAN: tipoBasico\r\n   {:RESULT = new TipoBoolean(); :};\r\n\r\n//4.3)Tipos arrays \r\nTIPO_ARRAY ::= COR_A:ca Exp0:dimension COR_C TIPO_ARRAY:tipoArray\r\n{:RESULT = new TipoArray(tipoArray, dimension, ca.getFila(), ca.getColumna());:};\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/constructorast/ConstructorAST.cup b/src/constructorast/ConstructorAST.cup
--- a/src/constructorast/ConstructorAST.cup	(revision ef64d08a3a5810111f9703a2afc7d1ed9b72c1ae)
+++ b/src/constructorast/ConstructorAST.cup	(date 1618338512218)
@@ -63,28 +63,28 @@
 
 //3.2) Operadores comparativos
 // ==
-Exp2 ::= Exp3:op1 IGUALIGUAL:ig Exp3:op2 
+Exp2 ::= Exp3:op1 IGUALIGUAL:ig Exp3:op2
 	{:RESULT = as.igualIgual(op1, op2, ig.getFila(), ig.getColumna()); :};
 
 // >
 Exp2 ::= Exp3:op1 MAYOR: ma Exp3:op2
-	{:RESULT = as.mayor(op1, op2, ma.getFila(), ma.getColumna()); :}; 
+	{:RESULT = as.mayor(op1, op2, ma.getFila(), ma.getColumna()); :};
 
 // <
-Exp2 ::= Exp3:op1 MENOR: me Exp3:op2 
-	{:RESULT = as.menor(op1, op2, me.getFila(), me.getColumna()); :}; 
+Exp2 ::= Exp3:op1 MENOR: me Exp3:op2
+	{:RESULT = as.menor(op1, op2, me.getFila(), me.getColumna()); :};
 
 // >=
 Exp2::= Exp3:op1 MAYORIGUAL: mi Exp3:op2
-	{:RESULT = as.mayorIgual(op1, op2, mi.getFila(), mi.getColumna()); :}; 
+	{:RESULT = as.mayorIgual(op1, op2, mi.getFila(), mi.getColumna()); :};
 
 // <=
 Exp2::= Exp3:op1 MENORIGUAL: mi Exp3:op2
-	{:RESULT = as.menorIgual(op1, op2, mi.getFila(), mi.getColumna()); :}; 
+	{:RESULT = as.menorIgual(op1, op2, mi.getFila(), mi.getColumna()); :};
 
 // !=
 Exp2 ::= Exp3:op1 DISTINTO: dist Exp3:op2
-	{:RESULT = as.distinto(op1, op2, dist.getFila(), dist.getColumna()); :}; 
+	{:RESULT = as.distinto(op1, op2, dist.getFila(), dist.getColumna()); :};
 
 Exp2 ::= Exp3: op
    {:RESULT = op; :};
@@ -118,6 +118,8 @@
 Exp4 ::= Exp4 :op1 MOD:mod Exp5:op2
    {:RESULT=as.mod(op1, op2, mod.getFila(), mod.getColumna()); :};
 
+Exp4  ::= Exp5:op1
+    {:RESULT=op1;:};
 
 //3.3.3) Potencia
 Exp5 ::= Exp5:e1 POT:pot Exp6:e2
@@ -131,7 +133,7 @@
 Exp6 ::= Exp7:e1
 {:RESULT=e1;:};
 
-//3.5) Corchete, asterisco y new 
+//3.5) Corchete, asterisco y new
 Exp7 ::= Exp7:e1 COR_A:ca Exp0:e2 COR_C
 {:RESULT=as.corchete(e1, e2, ca.getFila(), ca.getColumna());:};
 
@@ -141,7 +143,7 @@
 {:RESULT = as.nuevo(tipo, tam, nuevo.getFila(), nuevo.getColumna());:};
 Exp7	::= NEW:nuevo TIPO:tipo COR_A COR_C
 {:RESULT = as.nuevo(
-   tipo, as.ent("1", nuevo.getFila(), nuevo.getColumna()), 
+   tipo, as.ent("1", nuevo.getFila(), nuevo.getColumna()),
    nuevo.getFila(), nuevo.getColumna());:};
 Exp7  ::= Exp8:op1
 {:RESULT=op1;:};
Index: test/expresiones.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/expresiones.txt b/test/expresiones.txt
--- a/test/expresiones.txt	(revision ef64d08a3a5810111f9703a2afc7d1ed9b72c1ae)
+++ b/test/expresiones.txt	(date 1618337157443)
@@ -1,0 +1,1 @@
+6
\ No newline at end of file
Index: pruebasVarias.txt
===================================================================
diff --git a/pruebasVarias.txt b/pruebasVarias.txt
deleted file mode 100644
--- a/pruebasVarias.txt	(revision ef64d08a3a5810111f9703a2afc7d1ed9b72c1ae)
+++ /dev/null	(revision ef64d08a3a5810111f9703a2afc7d1ed9b72c1ae)
@@ -1,186 +0,0 @@
-int x = 4;
-int y = 5;
-
-boolean a = true;
-boolean b = false;
-
-int V[10]= {1,2,3,4,5,6,7,8,9,10};
-int V2[10] = {1,2,3,4,5,6,7,8,9,10,11,12}; #Deberia dar fallo por haber exceso de valores para guardar.
-
-boolean a1[3] = {false,true,true};
-boolean a2[3] = {false, true,3}; #Deberia dar fallo por tipo de valor a asignar.
-
-
-
-int x = 3;
-int y = 5;
-boolean a = true;
-boolean b = false;
-
-#Las siguientes declaraciones son todas erroneas, pues asignamos a tipo booleano un tipo entero
-#y a tipo entero un tipo booleano
-boolean e1 = x / y;
-boolean e2 = x * y;
-boolean e3 = x **y;
-boolean e4 = x+y;
-boolean e5 = x-y;
-boolean e6 = x % y;
-
-int e7 = x<y;
-int e8 = x>y;
-int e9 = x <=y;
-int e10 = x >= y;
-int e11 = x ==y;
-
-int e12 = a & b;
-int e13 = !a;
-int e14 = a == b;
-int e15 = a | b;
-
-
-
-
-
-
-
-
-
-# Error de vinculación mbas variablesno declaras
-
-x = y;
-
-# Error de tipado
-
-int x = true;
-
-# Error de vinculación de nuevo
-
-call pepe(8);
-
-
-
-# Funcion declarada con un tipo distinto del que devuelve
-
-fun int multiplica(int x, int y){
-	return true;
-}
-
-# Error de tipos mezclado con vinculacion.
-# Variable m sin inicializar. Sólo se muestra este error.
-# Mejor no decirle también que está mal tipada para no confudir al usuario
-
-int z = m;
-
-
-# Uso de una función de tipo innadecuado
-
-fun bool esPositivo(int x){
-	return x > 0;
-}
-
-int suma = esPositivo(3) + 4;
-
-# Llamada a función con exceso, defecto de parametros y parametros de tipo innadecuado
-
-bool c1 = esPositivo(3, 4);
-
-bool c2 = esPositivo();
-
-bool c3 = esPositivo(true);
-
-# Hacemos una llamada correcta sin error
-
-bool c4 = esPositivo(4);
-
-
-# Cuando nos pasemos de 15 errores nos diran de que son demasiados y que se para la compilación
-# Es mejor que el usuario revise su código. Y resuelva primero estos 15 errores antes de seguir
-
-# Este error ya no lo marcará. Es el error nº 15
-int y = true;
-
-
-
-
-
-
-
-
-
-# Tipamos mal una variable
-int x = true;
-
-
-# No tengo un tipo para darle a x realmente (¿bool o int?)
-# Se queda con el tipo de definicón. Entiende que x es de tipo int
-# La primera asignación estará mal tipada y la segunda bien
-bool y = x;
-int z = x;
-
-struct tPersona{
-	int dinero;
-	bool feliz = true;
-}
-
-tPersona juan;
-
-# Error por un tipo de un campo de un struct
-if (juan.dinero && true){
-
-}
-
-# Error paso de parametros a función por tipo del usuario no declarado
-
-fun bool funcion(tNuevo tipo){
-	return true;
-}
-
-# Warning por redefinición de variable. Avisa de que se queda con la primera declaración
-int z;
-
-# Error en un swicth. Tipo de los cases distinto del tipo de la variable del switch
-
-switch(z){
-case 1:
-	break;
-case true:
-	break;
-default:
-}
-
-# Error de tipo en la condición de un bucle for
-
-for (int i = 0; i+1; i = i+1){
-}
-
-# Variable de un bucle for sin declarar, error en el paso también y en el cuerpo del bucle
-# Que la variable w no está declarada sale 2 veces, una por w = 0 y otra por w = p
-for(w = 0; w < 13; w = p){
-	int x = False && True;
-}
-
-
-
-
-
-
-
-
-# Podemos combinar expresiones en partes derechas como queramos
-# div indica división entera (la única soportada por la máquina-P).
-
-# Ejemplos de expresiones enteras
-int x = 3 + 2 - 1 % 7 * 5 div (-1);
-int y = x + 3 * 5 % (x+3);
-
-# Ejemplos de expresiones booleanas
-bool a = x == 3 && x > y;
-bool b = a || x <= 3;
-bool c = !b;
-
-
-
-
-
-
-
Index: src/constructorast/ClaseLexica.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n//----------------------------------------------------\n// The following code was generated by CUP v0.11b beta 20140220\n// Tue Apr 13 18:45:41 CEST 2021\n//----------------------------------------------------\n\npackage constructorast;\n\n/** CUP generated class containing symbol constants. */\npublic class ClaseLexica {\n  /* terminals */\n  public static final int DISTINTO = 9;\n  public static final int POT = 16;\n  public static final int CONST = 41;\n  public static final int POR = 13;\n  public static final int CASE = 39;\n  public static final int INT = 32;\n  public static final int PUNTOCOMA = 31;\n  public static final int LLAVE_C = 27;\n  public static final int LLAVE_A = 26;\n  public static final int NOT = 17;\n  public static final int MENORIGUAL = 8;\n  public static final int AND = 3;\n  public static final int IGUAL = 10;\n  public static final int OR = 2;\n  public static final int DIV = 14;\n  public static final int IF = 34;\n  public static final int MAYORIGUAL = 7;\n  public static final int EOF = 0;\n  public static final int BOOLEAN = 33;\n  public static final int RETURN = 36;\n  public static final int TRUE = 28;\n  public static final int NEW = 21;\n  public static final int error = 1;\n  public static final int COMA = 30;\n  public static final int MENOS = 12;\n  public static final int MENOR = 6;\n  public static final int MOD = 15;\n  public static final int VOID = 43;\n  public static final int PUNTERO = 20;\n  public static final int SWITCH = 38;\n  public static final int MAYOR = 5;\n  public static final int ENT = 22;\n  public static final int ELSE = 35;\n  public static final int IDEN = 23;\n  public static final int IGUALIGUAL = 4;\n  public static final int WHILE = 37;\n  public static final int DEFAULT = 40;\n  public static final int PAREN_C = 25;\n  public static final int PAREN_A = 24;\n  public static final int COR_C = 19;\n  public static final int FALSE = 29;\n  public static final int COR_A = 18;\n  public static final int STRUCT = 42;\n  public static final int MAS = 11;\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/constructorast/ClaseLexica.java b/src/constructorast/ClaseLexica.java
--- a/src/constructorast/ClaseLexica.java	(revision ef64d08a3a5810111f9703a2afc7d1ed9b72c1ae)
+++ b/src/constructorast/ClaseLexica.java	(date 1618338516942)
@@ -1,7 +1,7 @@
 
 //----------------------------------------------------
 // The following code was generated by CUP v0.11b beta 20140220
-// Tue Apr 13 18:45:41 CEST 2021
+// Tue Apr 13 20:28:36 CEST 2021
 //----------------------------------------------------
 
 package constructorast;
Index: src/constructorast/ConstructAST.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n//----------------------------------------------------\n// The following code was generated by CUP v0.11b beta 20140220\n// Tue Apr 13 18:45:41 CEST 2021\n//----------------------------------------------------\n\npackage constructorast;\n\nimport java_cup.runtime.*;\nimport alex.AnalizadorLexico;\nimport alex.UnidadLexica;\nimport alex.TokenValue;\nimport errors.GestionErrores;\nimport ast.E.*;\nimport ast.T.*;\nimport ast.AS;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java_cup.runtime.ComplexSymbolFactory.Location;\n\n/** CUP v0.11b beta 20140220 generated parser.\n  * @version Tue Apr 13 18:45:41 CEST 2021\n  */\npublic class ConstructAST extends java_cup.runtime.lr_parser {\n\n  /** Default constructor. */\n  public ConstructAST() {super();}\n\n  /** Constructor which sets the default scanner. */\n  public ConstructAST(java_cup.runtime.Scanner s) {super(s);}\n\n  /** Constructor which sets the default scanner. */\n  public ConstructAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}\n\n  /** Production table. */\n  protected static final short _production_table[][] = \n    unpackFromStrings(new String[] {\n    \"\\000\\051\\000\\002\\006\\005\\000\\002\\002\\004\\000\\002\\006\" +\n    \"\\003\\000\\002\\007\\005\\000\\002\\007\\003\\000\\002\\010\\005\" +\n    \"\\000\\002\\010\\005\\000\\002\\010\\005\\000\\002\\010\\005\\000\" +\n    \"\\002\\010\\005\\000\\002\\010\\005\\000\\002\\010\\003\\000\\002\" +\n    \"\\011\\005\\000\\002\\011\\005\\000\\002\\011\\003\\000\\002\\012\" +\n    \"\\005\\000\\002\\012\\005\\000\\002\\012\\005\\000\\002\\013\\005\" +\n    \"\\000\\002\\013\\003\\000\\002\\014\\004\\000\\002\\014\\003\\000\" +\n    \"\\002\\015\\006\\000\\002\\015\\004\\000\\002\\015\\007\\000\\002\" +\n    \"\\015\\006\\000\\002\\015\\003\\000\\002\\016\\003\\000\\002\\016\" +\n    \"\\003\\000\\002\\016\\005\\000\\002\\016\\003\\000\\002\\016\\003\" +\n    \"\\000\\002\\016\\006\\000\\002\\020\\002\\000\\002\\020\\004\\000\" +\n    \"\\002\\022\\005\\000\\002\\022\\002\\000\\002\\002\\003\\000\\002\" +\n    \"\\003\\003\\000\\002\\003\\003\\000\\002\\005\\006\" });\n\n  /** Access to production table. */\n  public short[][] production_table() {return _production_table;}\n\n  /** Parse-action table. */\n  protected static final short[][] _action_table = \n    unpackFromStrings(new String[] {\n    \"\\000\\105\\000\\002\\001\\002\\000\\044\\002\\ufff3\\004\\ufff3\\005\" +\n    \"\\ufff3\\006\\ufff3\\007\\ufff3\\010\\ufff3\\011\\ufff3\\012\\ufff3\\013\\ufff3\" +\n    \"\\015\\ufff3\\016\\ufff3\\017\\033\\020\\032\\021\\031\\025\\ufff3\\033\" +\n    \"\\ufff3\\040\\ufff3\\001\\002\\000\\036\\002\\ufff6\\004\\ufff6\\005\\ufff6\" +\n    \"\\006\\021\\007\\025\\010\\024\\011\\017\\012\\016\\013\\022\\015\" +\n    \"\\020\\016\\023\\025\\ufff6\\033\\ufff6\\040\\ufff6\\001\\002\\000\\016\" +\n    \"\\002\\ufffd\\004\\ufffd\\005\\014\\025\\ufffd\\033\\ufffd\\040\\ufffd\\001\" +\n    \"\\002\\000\\014\\002\\uffff\\004\\012\\025\\uffff\\033\\uffff\\040\\uffff\" +\n    \"\\001\\002\\000\\004\\002\\011\\001\\002\\000\\004\\002\\000\\001\" +\n    \"\\002\\000\\002\\001\\002\\000\\012\\002\\001\\025\\001\\033\\001\" +\n    \"\\040\\001\\001\\002\\000\\002\\001\\002\\000\\014\\002\\ufffe\\004\" +\n    \"\\ufffe\\025\\ufffe\\033\\ufffe\\040\\ufffe\\001\\002\\000\\002\\001\\002\" +\n    \"\\000\\002\\001\\002\\000\\002\\001\\002\\000\\002\\001\\002\\000\" +\n    \"\\002\\001\\002\\000\\002\\001\\002\\000\\002\\001\\002\\000\\002\" +\n    \"\\001\\002\\000\\022\\002\\ufffb\\004\\ufffb\\005\\ufffb\\015\\020\\016\" +\n    \"\\023\\025\\ufffb\\033\\ufffb\\040\\ufffb\\001\\002\\000\\022\\002\\ufffa\" +\n    \"\\004\\ufffa\\005\\ufffa\\015\\020\\016\\023\\025\\ufffa\\033\\ufffa\\040\" +\n    \"\\ufffa\\001\\002\\000\\044\\002\\ufff4\\004\\ufff4\\005\\ufff4\\006\\ufff4\" +\n    \"\\007\\ufff4\\010\\ufff4\\011\\ufff4\\012\\ufff4\\013\\ufff4\\015\\ufff4\\016\" +\n    \"\\ufff4\\017\\033\\020\\032\\021\\031\\025\\ufff4\\033\\ufff4\\040\\ufff4\" +\n    \"\\001\\002\\000\\022\\023\\046\\026\\047\\027\\035\\030\\036\\031\" +\n    \"\\037\\032\\034\\036\\040\\037\\041\\001\\002\\000\\022\\023\\046\" +\n    \"\\026\\047\\027\\035\\030\\036\\031\\037\\032\\034\\036\\040\\037\" +\n    \"\\041\\001\\002\\000\\022\\023\\046\\026\\047\\027\\035\\030\\036\" +\n    \"\\031\\037\\032\\034\\036\\040\\037\\041\\001\\002\\000\\002\\001\" +\n    \"\\002\\000\\006\\042\\072\\043\\070\\001\\002\\000\\050\\002\\uffe6\" +\n    \"\\004\\uffe6\\005\\uffe6\\006\\uffe6\\007\\uffe6\\010\\uffe6\\011\\uffe6\\012\" +\n    \"\\uffe6\\013\\uffe6\\015\\uffe6\\016\\uffe6\\017\\uffe6\\020\\uffe6\\021\\uffe6\" +\n    \"\\022\\uffe6\\024\\uffe6\\025\\uffe6\\033\\uffe6\\040\\uffe6\\001\\002\\000\" +\n    \"\\052\\002\\uffe5\\004\\uffe5\\005\\uffe5\\006\\uffe5\\007\\uffe5\\010\\uffe5\" +\n    \"\\011\\uffe5\\012\\uffe5\\013\\uffe5\\015\\uffe5\\016\\uffe5\\017\\uffe5\\020\" +\n    \"\\uffe5\\021\\uffe5\\022\\uffe5\\024\\uffe5\\025\\uffe5\\032\\057\\033\\uffe5\" +\n    \"\\040\\uffe5\\001\\002\\000\\050\\002\\uffe3\\004\\uffe3\\005\\uffe3\\006\" +\n    \"\\uffe3\\007\\uffe3\\010\\uffe3\\011\\uffe3\\012\\uffe3\\013\\uffe3\\015\\uffe3\" +\n    \"\\016\\uffe3\\017\\uffe3\\020\\uffe3\\021\\uffe3\\022\\uffe3\\024\\uffe3\\025\" +\n    \"\\uffe3\\033\\uffe3\\040\\uffe3\\001\\002\\000\\050\\002\\uffe2\\004\\uffe2\" +\n    \"\\005\\uffe2\\006\\uffe2\\007\\uffe2\\010\\uffe2\\011\\uffe2\\012\\uffe2\\013\" +\n    \"\\uffe2\\015\\uffe2\\016\\uffe2\\017\\uffe2\\020\\uffe2\\021\\uffe2\\022\\uffe2\" +\n    \"\\024\\uffe2\\025\\uffe2\\033\\uffe2\\040\\uffe2\\001\\002\\000\\050\\002\" +\n    \"\\uffe7\\004\\uffe7\\005\\uffe7\\006\\uffe7\\007\\uffe7\\010\\uffe7\\011\\uffe7\" +\n    \"\\012\\uffe7\\013\\uffe7\\015\\uffe7\\016\\uffe7\\017\\uffe7\\020\\uffe7\\021\" +\n    \"\\uffe7\\022\\uffe7\\024\\uffe7\\025\\uffe7\\033\\uffe7\\040\\uffe7\\001\\002\" +\n    \"\\000\\050\\002\\uffec\\004\\uffec\\005\\uffec\\006\\uffec\\007\\uffec\\010\" +\n    \"\\uffec\\011\\uffec\\012\\uffec\\013\\uffec\\015\\uffec\\016\\uffec\\017\\uffec\" +\n    \"\\020\\uffec\\021\\uffec\\022\\uffec\\024\\054\\025\\uffec\\033\\uffec\\040\" +\n    \"\\uffec\\001\\002\\000\\046\\002\\uffee\\004\\uffee\\005\\uffee\\006\\uffee\" +\n    \"\\007\\uffee\\010\\uffee\\011\\uffee\\012\\uffee\\013\\uffee\\015\\uffee\\016\" +\n    \"\\uffee\\017\\uffee\\020\\uffee\\021\\uffee\\022\\uffee\\025\\uffee\\033\\uffee\" +\n    \"\\040\\uffee\\001\\002\\000\\046\\002\\ufff2\\004\\ufff2\\005\\ufff2\\006\" +\n    \"\\ufff2\\007\\ufff2\\010\\ufff2\\011\\ufff2\\012\\ufff2\\013\\ufff2\\015\\ufff2\" +\n    \"\\016\\ufff2\\017\\ufff2\\020\\ufff2\\021\\ufff2\\022\\052\\025\\ufff2\\033\" +\n    \"\\ufff2\\040\\ufff2\\001\\002\\000\\022\\023\\046\\026\\047\\027\\035\" +\n    \"\\030\\036\\031\\037\\032\\034\\036\\040\\037\\041\\001\\002\\000\" +\n    \"\\002\\001\\002\\000\\050\\002\\uffea\\004\\uffea\\005\\uffea\\006\\uffea\" +\n    \"\\007\\uffea\\010\\uffea\\011\\uffea\\012\\uffea\\013\\uffea\\015\\uffea\\016\" +\n    \"\\uffea\\017\\uffea\\020\\uffea\\021\\uffea\\022\\uffea\\024\\uffea\\025\\uffea\" +\n    \"\\033\\uffea\\040\\uffea\\001\\002\\000\\046\\002\\uffed\\004\\uffed\\005\" +\n    \"\\uffed\\006\\uffed\\007\\uffed\\010\\uffed\\011\\uffed\\012\\uffed\\013\\uffed\" +\n    \"\\015\\uffed\\016\\uffed\\017\\uffed\\020\\uffed\\021\\uffed\\022\\uffed\\025\" +\n    \"\\uffed\\033\\uffed\\040\\uffed\\001\\002\\000\\022\\023\\046\\026\\047\" +\n    \"\\027\\035\\030\\036\\031\\037\\032\\034\\036\\040\\037\\041\\001\" +\n    \"\\002\\000\\046\\002\\uffef\\004\\uffef\\005\\uffef\\006\\uffef\\007\\uffef\" +\n    \"\\010\\uffef\\011\\uffef\\012\\uffef\\013\\uffef\\015\\uffef\\016\\uffef\\017\" +\n    \"\\uffef\\020\\uffef\\021\\uffef\\022\\uffef\\025\\uffef\\033\\uffef\\040\\uffef\" +\n    \"\\001\\002\\000\\002\\001\\002\\000\\004\\025\\056\\001\\002\\000\" +\n    \"\\050\\002\\uffeb\\004\\uffeb\\005\\uffeb\\006\\uffeb\\007\\uffeb\\010\\uffeb\" +\n    \"\\011\\uffeb\\012\\uffeb\\013\\uffeb\\015\\uffeb\\016\\uffeb\\017\\uffeb\\020\" +\n    \"\\uffeb\\021\\uffeb\\022\\uffeb\\024\\uffeb\\025\\uffeb\\033\\uffeb\\040\\uffeb\" +\n    \"\\001\\002\\000\\004\\033\\uffe0\\001\\002\\000\\004\\033\\066\\001\" +\n    \"\\002\\000\\006\\033\\uffdd\\040\\062\\001\\002\\000\\002\\001\\002\" +\n    \"\\000\\004\\033\\uffdf\\001\\002\\000\\006\\033\\uffdd\\040\\062\\001\" +\n    \"\\002\\000\\004\\033\\uffde\\001\\002\\000\\050\\002\\uffe1\\004\\uffe1\" +\n    \"\\005\\uffe1\\006\\uffe1\\007\\uffe1\\010\\uffe1\\011\\uffe1\\012\\uffe1\\013\" +\n    \"\\uffe1\\015\\uffe1\\016\\uffe1\\017\\uffe1\\020\\uffe1\\021\\uffe1\\022\\uffe1\" +\n    \"\\024\\uffe1\\025\\uffe1\\033\\uffe1\\040\\uffe1\\001\\002\\000\\004\\024\" +\n    \"\\uffdc\\001\\002\\000\\004\\024\\uffda\\001\\002\\000\\004\\024\\073\" +\n    \"\\001\\002\\000\\004\\024\\uffdb\\001\\002\\000\\004\\025\\074\\001\" +\n    \"\\002\\000\\050\\002\\uffe8\\004\\uffe8\\005\\uffe8\\006\\uffe8\\007\\uffe8\" +\n    \"\\010\\uffe8\\011\\uffe8\\012\\uffe8\\013\\uffe8\\015\\uffe8\\016\\uffe8\\017\" +\n    \"\\uffe8\\020\\uffe8\\021\\uffe8\\022\\uffe8\\024\\uffe8\\025\\uffe8\\033\\uffe8\" +\n    \"\\040\\uffe8\\001\\002\\000\\004\\025\\076\\001\\002\\000\\050\\002\" +\n    \"\\uffe9\\004\\uffe9\\005\\uffe9\\006\\uffe9\\007\\uffe9\\010\\uffe9\\011\\uffe9\" +\n    \"\\012\\uffe9\\013\\uffe9\\015\\uffe9\\016\\uffe9\\017\\uffe9\\020\\uffe9\\021\" +\n    \"\\uffe9\\022\\uffe9\\024\\uffe9\\025\\uffe9\\033\\uffe9\\040\\uffe9\\001\\002\" +\n    \"\\000\\004\\033\\100\\001\\002\\000\\050\\002\\uffe4\\004\\uffe4\\005\" +\n    \"\\uffe4\\006\\uffe4\\007\\uffe4\\010\\uffe4\\011\\uffe4\\012\\uffe4\\013\\uffe4\" +\n    \"\\015\\uffe4\\016\\uffe4\\017\\uffe4\\020\\uffe4\\021\\uffe4\\022\\uffe4\\024\" +\n    \"\\uffe4\\025\\uffe4\\033\\uffe4\\040\\uffe4\\001\\002\\000\\046\\002\\ufff1\" +\n    \"\\004\\ufff1\\005\\ufff1\\006\\ufff1\\007\\ufff1\\010\\ufff1\\011\\ufff1\\012\" +\n    \"\\ufff1\\013\\ufff1\\015\\ufff1\\016\\ufff1\\017\\ufff1\\020\\ufff1\\021\\ufff1\" +\n    \"\\022\\052\\025\\ufff1\\033\\ufff1\\040\\ufff1\\001\\002\\000\\046\\002\" +\n    \"\\ufff0\\004\\ufff0\\005\\ufff0\\006\\ufff0\\007\\ufff0\\010\\ufff0\\011\\ufff0\" +\n    \"\\012\\ufff0\\013\\ufff0\\015\\ufff0\\016\\ufff0\\017\\ufff0\\020\\ufff0\\021\" +\n    \"\\ufff0\\022\\052\\025\\ufff0\\033\\ufff0\\040\\ufff0\\001\\002\\000\\022\" +\n    \"\\002\\ufff7\\004\\ufff7\\005\\ufff7\\015\\020\\016\\023\\025\\ufff7\\033\" +\n    \"\\ufff7\\040\\ufff7\\001\\002\\000\\022\\002\\ufffc\\004\\ufffc\\005\\ufffc\" +\n    \"\\015\\020\\016\\023\\025\\ufffc\\033\\ufffc\\040\\ufffc\\001\\002\\000\" +\n    \"\\044\\002\\ufff5\\004\\ufff5\\005\\ufff5\\006\\ufff5\\007\\ufff5\\010\\ufff5\" +\n    \"\\011\\ufff5\\012\\ufff5\\013\\ufff5\\015\\ufff5\\016\\ufff5\\017\\033\\020\" +\n    \"\\032\\021\\031\\025\\ufff5\\033\\ufff5\\040\\ufff5\\001\\002\\000\\022\" +\n    \"\\002\\ufff9\\004\\ufff9\\005\\ufff9\\015\\020\\016\\023\\025\\ufff9\\033\" +\n    \"\\ufff9\\040\\ufff9\\001\\002\\000\\022\\002\\ufff8\\004\\ufff8\\005\\ufff8\" +\n    \"\\015\\020\\016\\023\\025\\ufff8\\033\\ufff8\\040\\ufff8\\001\\002\" });\n\n  /** Access to parse-action table. */\n  public short[][] action_table() {return _action_table;}\n\n  /** <code>reduce_goto</code> table. */\n  protected static final short[][] _reduce_table = \n    unpackFromStrings(new String[] {\n    \"\\000\\105\\000\\014\\006\\007\\007\\006\\010\\005\\011\\004\\012\" +\n    \"\\003\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\\000\\002\" +\n    \"\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\\000\\002\\001\" +\n    \"\\001\\000\\014\\006\\012\\007\\006\\010\\005\\011\\004\\012\\003\" +\n    \"\\001\\001\\000\\002\\001\\001\\000\\012\\007\\014\\010\\005\\011\" +\n    \"\\004\\012\\003\\001\\001\\000\\002\\001\\001\\000\\006\\011\\106\" +\n    \"\\012\\003\\001\\001\\000\\006\\011\\105\\012\\003\\001\\001\\000\" +\n    \"\\004\\012\\104\\001\\001\\000\\006\\011\\103\\012\\003\\001\\001\" +\n    \"\\000\\006\\011\\102\\012\\003\\001\\001\\000\\004\\012\\027\\001\" +\n    \"\\001\\000\\006\\011\\026\\012\\003\\001\\001\\000\\006\\011\\025\" +\n    \"\\012\\003\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\\000\" +\n    \"\\002\\001\\001\\000\\012\\013\\101\\014\\043\\015\\042\\016\\041\" +\n    \"\\001\\001\\000\\012\\013\\100\\014\\043\\015\\042\\016\\041\\001\" +\n    \"\\001\\000\\012\\013\\044\\014\\043\\015\\042\\016\\041\\001\\001\" +\n    \"\\000\\014\\006\\076\\007\\006\\010\\005\\011\\004\\012\\003\\001\" +\n    \"\\001\\000\\006\\002\\070\\003\\066\\001\\001\\000\\002\\001\\001\" +\n    \"\\000\\002\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\\000\" +\n    \"\\002\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\\000\\002\" +\n    \"\\001\\001\\000\\010\\014\\050\\015\\042\\016\\041\\001\\001\\000\" +\n    \"\\004\\017\\047\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\" +\n    \"\\000\\010\\014\\052\\015\\042\\016\\041\\001\\001\\000\\002\\001\" +\n    \"\\001\\000\\014\\006\\054\\007\\006\\010\\005\\011\\004\\012\\003\" +\n    \"\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\\000\\016\\006\" +\n    \"\\060\\007\\006\\010\\005\\011\\004\\012\\003\\020\\057\\001\\001\" +\n    \"\\000\\002\\001\\001\\000\\004\\022\\062\\001\\001\\000\\014\\006\" +\n    \"\\063\\007\\006\\010\\005\\011\\004\\012\\003\\001\\001\\000\\002\" +\n    \"\\001\\001\\000\\004\\022\\064\\001\\001\\000\\002\\001\\001\\000\" +\n    \"\\002\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\\000\\002\" +\n    \"\\001\\001\\000\\002\\001\\001\\000\\014\\006\\074\\007\\006\\010\" +\n    \"\\005\\011\\004\\012\\003\\001\\001\\000\\002\\001\\001\\000\\002\" +\n    \"\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\\000\\002\\001\" +\n    \"\\001\\000\\002\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\" +\n    \"\\000\\002\\001\\001\\000\\002\\001\\001\\000\\002\\001\\001\\000\" +\n    \"\\002\\001\\001\" });\n\n  /** Access to <code>reduce_goto</code> table. */\n  public short[][] reduce_table() {return _reduce_table;}\n\n  /** Instance of action encapsulation class. */\n  protected CUP$ConstructAST$actions action_obj;\n\n  /** Action encapsulation object initializer. */\n  protected void init_actions()\n    {\n      action_obj = new CUP$ConstructAST$actions(this);\n    }\n\n  /** Invoke a user supplied parse action. */\n  public java_cup.runtime.Symbol do_action(\n    int                        act_num,\n    java_cup.runtime.lr_parser parser,\n    java.util.Stack            stack,\n    int                        top)\n    throws java.lang.Exception\n  {\n    /* call code in generated class */\n    return action_obj.CUP$ConstructAST$do_action(act_num, parser, stack, top);\n  }\n\n  /** Indicates start state. */\n  public int start_state() {return 0;}\n  /** Indicates start production. */\n  public int start_production() {return 1;}\n\n  /** <code>EOF</code> Symbol index. */\n  public int EOF_sym() {return 0;}\n\n  /** <code>error</code> Symbol index. */\n  public int error_sym() {return 1;}\n\n\n  /** User initialization code. */\n  public void user_init() throws java.lang.Exception\n    {\n \r\n   errores = new GestionErrores();\r\n   AnalizadorLexico alex = (AnalizadorLexico)getScanner();\r\n   alex.fijaGestionErrores(errores);\r\n\n    }\n\n  /** Scan to get the next Symbol. */\n  public java_cup.runtime.Symbol scan()\n    throws java.lang.Exception\n    {\n return getScanner().next_token(); \n    }\n\n \r\n   private GestionErrores errores;\r\n   public void syntax_error(Symbol unidadLexica) {\r\n     errores.errorSintactico((UnidadLexica)unidadLexica);\r\n   }\r\n\n}\n\n/** Cup generated class to encapsulate user supplied action code.*/\nclass CUP$ConstructAST$actions {\n\n\r\n   private AS as = new AS();\r\n\n  private final ConstructAST parser;\n\n  /** Constructor */\n  CUP$ConstructAST$actions(ConstructAST parser) {\n    this.parser = parser;\n  }\n\n  /** Method 0 with the actual generated action code for actions 0 to 300. */\n  public final java_cup.runtime.Symbol CUP$ConstructAST$do_action_part00000000(\n    int                        CUP$ConstructAST$act_num,\n    java_cup.runtime.lr_parser CUP$ConstructAST$parser,\n    java.util.Stack            CUP$ConstructAST$stack,\n    int                        CUP$ConstructAST$top)\n    throws java.lang.Exception\n    {\n      /* Symbol object for return from actions */\n      java_cup.runtime.Symbol CUP$ConstructAST$result;\n\n      /* select the action based on the action number */\n      switch (CUP$ConstructAST$act_num)\n        {\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 0: // Exp0 ::= Exp1 OR Exp0 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue or = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = as.or(op1, op2, or.getFila(), or.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp0\",4, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 1: // $START ::= Exp0 EOF \n            {\n              Object RESULT =null;\n\t\tE start_val = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tRESULT = start_val;\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"$START\",0, RESULT);\n            }\n          /* ACCEPT */\n          CUP$ConstructAST$parser.done_parsing();\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 2: // Exp0 ::= Exp1 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = op1; \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp0\",4, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 3: // Exp1 ::= Exp2 AND Exp1 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue and = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.and(op1, op2, and.getFila(), and.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp1\",5, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 4: // Exp1 ::= Exp2 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = op1; \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp1\",5, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 5: // Exp2 ::= Exp3 IGUALIGUAL Exp3 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue ig = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = as.igualIgual(op1, op2, ig.getFila(), ig.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp2\",6, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 6: // Exp2 ::= Exp3 MAYOR Exp3 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue ma = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = as.mayor(op1, op2, ma.getFila(), ma.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp2\",6, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 7: // Exp2 ::= Exp3 MENOR Exp3 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue me = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = as.menor(op1, op2, me.getFila(), me.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp2\",6, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 8: // Exp2 ::= Exp3 MAYORIGUAL Exp3 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue mi = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = as.mayorIgual(op1, op2, mi.getFila(), mi.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp2\",6, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 9: // Exp2 ::= Exp3 MENORIGUAL Exp3 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue mi = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = as.menorIgual(op1, op2, mi.getFila(), mi.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp2\",6, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 10: // Exp2 ::= Exp3 DISTINTO Exp3 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue dist = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = as.distinto(op1, op2, dist.getFila(), dist.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp2\",6, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 11: // Exp2 ::= Exp3 \n            {\n              E RESULT =null;\n\t\tE op = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = op; \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp2\",6, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 12: // Exp3 ::= Exp3 MAS Exp4 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue mas = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.suma(op1, op2, mas.getFila(), mas.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp3\",7, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 13: // Exp3 ::= Exp3 MENOS Exp4 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue menos = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.resta(op1, op2, menos.getFila(), menos.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp3\",7, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 14: // Exp3 ::= Exp4 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=op1; \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp3\",7, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 15: // Exp4 ::= Exp4 POR Exp5 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue por = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.mul(op1, op2, por.getFila(), por.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp4\",8, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 16: // Exp4 ::= Exp4 DIV Exp5 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue div = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.div(op1, op2, div.getFila(), div.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp4\",8, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 17: // Exp4 ::= Exp4 MOD Exp5 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue mod = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.mod(op1, op2, mod.getFila(), mod.getColumna()); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp4\",8, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 18: // Exp5 ::= Exp5 POT Exp6 \n            {\n              E RESULT =null;\n\t\tE e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTokenValue pot = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.pot(e1, e2, pot.getFila(), pot.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp5\",9, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 19: // Exp5 ::= Exp6 \n            {\n              E RESULT =null;\n\t\tE e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=e1;\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp5\",9, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 20: // Exp6 ::= NOT Exp6 \n            {\n              E RESULT =null;\n\t\tTokenValue not = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.not(e1, not.getFila(), not.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp6\",10, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 21: // Exp6 ::= Exp7 \n            {\n              E RESULT =null;\n\t\tE e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=e1;\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp6\",10, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 22: // Exp7 ::= Exp7 COR_A Exp0 COR_C \n            {\n              E RESULT =null;\n\t\tE e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;\n\t\tTokenValue ca = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tE e2 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tRESULT=as.corchete(e1, e2, ca.getFila(), ca.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp7\",11, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 23: // Exp7 ::= PUNTERO Exp9 \n            {\n              E RESULT =null;\n\t\tTokenValue punt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = as.dolar(op1, punt.getFila(), punt.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp7\",11, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 24: // Exp7 ::= NEW TIPO COR_A Exp0 COR_C \n            {\n              E RESULT =null;\n\t\tTokenValue nuevo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-4)).value;\n\t\tTipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;\n\t\tE tam = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tRESULT = as.nuevo(tipo, tam, nuevo.getFila(), nuevo.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp7\",11, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 25: // Exp7 ::= NEW TIPO COR_A COR_C \n            {\n              E RESULT =null;\n\t\tTokenValue nuevo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;\n\t\tTipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tRESULT = as.nuevo(\r\n   tipo, as.ent(\"1\", nuevo.getFila(), nuevo.getColumna()), \r\n   nuevo.getFila(), nuevo.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp7\",11, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 26: // Exp7 ::= Exp8 \n            {\n              E RESULT =null;\n\t\tE op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=op1;\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp7\",11, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 27: // Exp8 ::= ENT \n            {\n              E RESULT =null;\n\t\tTokenValue e1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.ent(e1.getLexema(), e1.getFila(), e1.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp8\",12, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 28: // Exp8 ::= IDEN \n            {\n              E RESULT =null;\n\t\tTokenValue e1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.iden(e1.getLexema(), e1.getFila(), e1.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp8\",12, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 29: // Exp8 ::= PAREN_A Exp0 PAREN_C \n            {\n              E RESULT =null;\n\t\tE e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tRESULT=e1;\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp8\",12, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 30: // Exp8 ::= TRUE \n            {\n              E RESULT =null;\n\t\tTokenValue tru = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.verdadero(tru.getFila(), tru.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp8\",12, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 31: // Exp8 ::= FALSE \n            {\n              E RESULT =null;\n\t\tTokenValue fal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.falso(fal.getFila(), fal.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp8\",12, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 32: // Exp8 ::= IDEN PAREN_A LIST_ARG PAREN_C \n            {\n              E RESULT =null;\n\t\tTokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;\n\t\tList<E> args = (List<E>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tTokenValue pc = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT=as.llamadaFuncion(as.iden(id.getLexema(), id.getFila(), id.getColumna()), args, pc.getFila(), pc.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"Exp8\",12, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 33: // LIST_ARG ::= \n            {\n              List<E> RESULT =null;\n\t\tRESULT=new ArrayList<E>();\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"LIST_ARG\",14, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 34: // LIST_ARG ::= Exp0 ARG \n            {\n              List<E> RESULT =null;\n\t\tE e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tList<E> e2 = (List<E>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\te2.add(0, e1); RESULT=e2;\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"LIST_ARG\",14, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 35: // ARG ::= COMA Exp0 ARG \n            {\n              List<E> RESULT =null;\n\t\tE e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;\n\t\tList<E> e2 = (List<E>)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\te2.add(0, e1); RESULT=e2;\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"ARG\",16, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 36: // ARG ::= \n            {\n              List<E> RESULT =null;\n\t\tRESULT=new ArrayList<E>();\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"ARG\",16, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 37: // TIPO ::= TIPO_BASICO \n            {\n              Tipo RESULT =null;\n\t\tTipo tipoBasico = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = tipoBasico; \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"TIPO\",0, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 38: // TIPO_BASICO ::= INT \n            {\n              Tipo RESULT =null;\n\t\tTokenValue tipoBasico = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = new TipoInt();\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"TIPO_BASICO\",1, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 39: // TIPO_BASICO ::= BOOLEAN \n            {\n              Tipo RESULT =null;\n\t\tTokenValue tipoBasico = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = new TipoBoolean(); \n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"TIPO_BASICO\",1, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /*. . . . . . . . . . . . . . . . . . . .*/\n          case 40: // TIPO_ARRAY ::= COR_A Exp0 COR_C TIPO_ARRAY \n            {\n              Tipo RESULT =null;\n\t\tTokenValue ca = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;\n\t\tE dimension = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;\n\t\tTipo tipoArray = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;\n\t\tRESULT = new TipoArray(tipoArray, dimension, ca.getFila(), ca.getColumna());\n              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol(\"TIPO_ARRAY\",3, RESULT);\n            }\n          return CUP$ConstructAST$result;\n\n          /* . . . . . .*/\n          default:\n            throw new Exception(\n               \"Invalid action number \"+CUP$ConstructAST$act_num+\"found in internal parse table\");\n\n        }\n    } /* end of method */\n\n  /** Method splitting the generated action code into several parts. */\n  public final java_cup.runtime.Symbol CUP$ConstructAST$do_action(\n    int                        CUP$ConstructAST$act_num,\n    java_cup.runtime.lr_parser CUP$ConstructAST$parser,\n    java.util.Stack            CUP$ConstructAST$stack,\n    int                        CUP$ConstructAST$top)\n    throws java.lang.Exception\n    {\n              return CUP$ConstructAST$do_action_part00000000(\n                               CUP$ConstructAST$act_num,\n                               CUP$ConstructAST$parser,\n                               CUP$ConstructAST$stack,\n                               CUP$ConstructAST$top);\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/constructorast/ConstructAST.java b/src/constructorast/ConstructAST.java
--- a/src/constructorast/ConstructAST.java	(revision ef64d08a3a5810111f9703a2afc7d1ed9b72c1ae)
+++ b/src/constructorast/ConstructAST.java	(date 1618338516941)
@@ -1,7 +1,7 @@
 
 //----------------------------------------------------
 // The following code was generated by CUP v0.11b beta 20140220
-// Tue Apr 13 18:45:41 CEST 2021
+// Tue Apr 13 20:28:36 CEST 2021
 //----------------------------------------------------
 
 package constructorast;
@@ -19,7 +19,7 @@
 import java_cup.runtime.ComplexSymbolFactory.Location;
 
 /** CUP v0.11b beta 20140220 generated parser.
-  * @version Tue Apr 13 18:45:41 CEST 2021
+  * @version Tue Apr 13 20:28:36 CEST 2021
   */
 public class ConstructAST extends java_cup.runtime.lr_parser {
 
@@ -35,19 +35,20 @@
   /** Production table. */
   protected static final short _production_table[][] = 
     unpackFromStrings(new String[] {
-    "\000\051\000\002\006\005\000\002\002\004\000\002\006" +
+    "\000\052\000\002\006\005\000\002\002\004\000\002\006" +
     "\003\000\002\007\005\000\002\007\003\000\002\010\005" +
     "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
     "\002\010\005\000\002\010\005\000\002\010\003\000\002" +
     "\011\005\000\002\011\005\000\002\011\003\000\002\012" +
-    "\005\000\002\012\005\000\002\012\005\000\002\013\005" +
-    "\000\002\013\003\000\002\014\004\000\002\014\003\000" +
-    "\002\015\006\000\002\015\004\000\002\015\007\000\002" +
-    "\015\006\000\002\015\003\000\002\016\003\000\002\016" +
-    "\003\000\002\016\005\000\002\016\003\000\002\016\003" +
-    "\000\002\016\006\000\002\020\002\000\002\020\004\000" +
-    "\002\022\005\000\002\022\002\000\002\002\003\000\002" +
-    "\003\003\000\002\003\003\000\002\005\006" });
+    "\005\000\002\012\005\000\002\012\005\000\002\012\003" +
+    "\000\002\013\005\000\002\013\003\000\002\014\004\000" +
+    "\002\014\003\000\002\015\006\000\002\015\004\000\002" +
+    "\015\007\000\002\015\006\000\002\015\003\000\002\016" +
+    "\003\000\002\016\003\000\002\016\005\000\002\016\003" +
+    "\000\002\016\003\000\002\016\006\000\002\020\002\000" +
+    "\002\020\004\000\002\022\005\000\002\022\002\000\002" +
+    "\002\003\000\002\003\003\000\002\003\003\000\002\005" +
+    "\006" });
 
   /** Access to production table. */
   public short[][] production_table() {return _production_table;}
@@ -55,109 +56,132 @@
   /** Parse-action table. */
   protected static final short[][] _action_table = 
     unpackFromStrings(new String[] {
-    "\000\105\000\002\001\002\000\044\002\ufff3\004\ufff3\005" +
-    "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
-    "\015\ufff3\016\ufff3\017\033\020\032\021\031\025\ufff3\033" +
-    "\ufff3\040\ufff3\001\002\000\036\002\ufff6\004\ufff6\005\ufff6" +
-    "\006\021\007\025\010\024\011\017\012\016\013\022\015" +
-    "\020\016\023\025\ufff6\033\ufff6\040\ufff6\001\002\000\016" +
-    "\002\ufffd\004\ufffd\005\014\025\ufffd\033\ufffd\040\ufffd\001" +
-    "\002\000\014\002\uffff\004\012\025\uffff\033\uffff\040\uffff" +
-    "\001\002\000\004\002\011\001\002\000\004\002\000\001" +
-    "\002\000\002\001\002\000\012\002\001\025\001\033\001" +
-    "\040\001\001\002\000\002\001\002\000\014\002\ufffe\004" +
-    "\ufffe\025\ufffe\033\ufffe\040\ufffe\001\002\000\002\001\002" +
-    "\000\002\001\002\000\002\001\002\000\002\001\002\000" +
-    "\002\001\002\000\002\001\002\000\002\001\002\000\002" +
-    "\001\002\000\022\002\ufffb\004\ufffb\005\ufffb\015\020\016" +
-    "\023\025\ufffb\033\ufffb\040\ufffb\001\002\000\022\002\ufffa" +
-    "\004\ufffa\005\ufffa\015\020\016\023\025\ufffa\033\ufffa\040" +
-    "\ufffa\001\002\000\044\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
-    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016" +
-    "\ufff4\017\033\020\032\021\031\025\ufff4\033\ufff4\040\ufff4" +
-    "\001\002\000\022\023\046\026\047\027\035\030\036\031" +
-    "\037\032\034\036\040\037\041\001\002\000\022\023\046" +
-    "\026\047\027\035\030\036\031\037\032\034\036\040\037" +
-    "\041\001\002\000\022\023\046\026\047\027\035\030\036" +
-    "\031\037\032\034\036\040\037\041\001\002\000\002\001" +
-    "\002\000\006\042\072\043\070\001\002\000\050\002\uffe6" +
-    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
-    "\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
-    "\022\uffe6\024\uffe6\025\uffe6\033\uffe6\040\uffe6\001\002\000" +
-    "\052\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
-    "\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
-    "\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\032\057\033\uffe5" +
-    "\040\uffe5\001\002\000\050\002\uffe3\004\uffe3\005\uffe3\006" +
-    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3" +
-    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025" +
-    "\uffe3\033\uffe3\040\uffe3\001\002\000\050\002\uffe2\004\uffe2" +
+    "\000\106\000\022\023\016\026\020\027\006\030\007\031" +
+    "\011\032\005\036\010\037\012\001\002\000\004\002\110" +
+    "\001\002\000\022\023\016\026\020\027\006\030\007\031" +
+    "\011\032\005\036\010\037\012\001\002\000\006\042\101" +
+    "\043\100\001\002\000\050\002\uffe5\004\uffe5\005\uffe5\006" +
+    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
+    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\025" +
+    "\uffe5\033\uffe5\040\uffe5\001\002\000\050\002\uffe2\004\uffe2" +
     "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
     "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
-    "\024\uffe2\025\uffe2\033\uffe2\040\uffe2\001\002\000\050\002" +
-    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
-    "\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
-    "\uffe7\022\uffe7\024\uffe7\025\uffe7\033\uffe7\040\uffe7\001\002" +
-    "\000\050\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
-    "\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016\uffec\017\uffec" +
-    "\020\uffec\021\uffec\022\uffec\024\054\025\uffec\033\uffec\040" +
-    "\uffec\001\002\000\046\002\uffee\004\uffee\005\uffee\006\uffee" +
-    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016" +
-    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\025\uffee\033\uffee" +
-    "\040\uffee\001\002\000\046\002\ufff2\004\ufff2\005\ufff2\006" +
-    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2" +
-    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\052\025\ufff2\033" +
-    "\ufff2\040\ufff2\001\002\000\022\023\046\026\047\027\035" +
-    "\030\036\031\037\032\034\036\040\037\041\001\002\000" +
-    "\002\001\002\000\050\002\uffea\004\uffea\005\uffea\006\uffea" +
-    "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015\uffea\016" +
-    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea\025\uffea" +
-    "\033\uffea\040\uffea\001\002\000\046\002\uffed\004\uffed\005" +
-    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
-    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\025" +
-    "\uffed\033\uffed\040\uffed\001\002\000\022\023\046\026\047" +
-    "\027\035\030\036\031\037\032\034\036\040\037\041\001" +
-    "\002\000\046\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef" +
-    "\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017" +
-    "\uffef\020\uffef\021\uffef\022\uffef\025\uffef\033\uffef\040\uffef" +
-    "\001\002\000\002\001\002\000\004\025\056\001\002\000" +
-    "\050\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
-    "\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
-    "\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\033\uffeb\040\uffeb" +
-    "\001\002\000\004\033\uffe0\001\002\000\004\033\066\001" +
-    "\002\000\006\033\uffdd\040\062\001\002\000\002\001\002" +
-    "\000\004\033\uffdf\001\002\000\006\033\uffdd\040\062\001" +
-    "\002\000\004\033\uffde\001\002\000\050\002\uffe1\004\uffe1" +
-    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
-    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
-    "\024\uffe1\025\uffe1\033\uffe1\040\uffe1\001\002\000\004\024" +
-    "\uffdc\001\002\000\004\024\uffda\001\002\000\004\024\073" +
-    "\001\002\000\004\024\uffdb\001\002\000\004\025\074\001" +
-    "\002\000\050\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
-    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\017" +
-    "\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\033\uffe8" +
-    "\040\uffe8\001\002\000\004\025\076\001\002\000\050\002" +
-    "\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
-    "\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
-    "\uffe9\022\uffe9\024\uffe9\025\uffe9\033\uffe9\040\uffe9\001\002" +
-    "\000\004\033\100\001\002\000\050\002\uffe4\004\uffe4\005" +
-    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
-    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024" +
-    "\uffe4\025\uffe4\033\uffe4\040\uffe4\001\002\000\046\002\ufff1" +
-    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
-    "\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
-    "\022\052\025\ufff1\033\ufff1\040\ufff1\001\002\000\046\002" +
-    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
-    "\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
-    "\ufff0\022\052\025\ufff0\033\ufff0\040\ufff0\001\002\000\022" +
-    "\002\ufff7\004\ufff7\005\ufff7\015\020\016\023\025\ufff7\033" +
-    "\ufff7\040\ufff7\001\002\000\022\002\ufffc\004\ufffc\005\ufffc" +
-    "\015\020\016\023\025\ufffc\033\ufffc\040\ufffc\001\002\000" +
-    "\044\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
-    "\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017\033\020" +
-    "\032\021\031\025\ufff5\033\ufff5\040\ufff5\001\002\000\022" +
-    "\002\ufff9\004\ufff9\005\ufff9\015\020\016\023\025\ufff9\033" +
-    "\ufff9\040\ufff9\001\002\000\022\002\ufff8\004\ufff8\005\ufff8" +
-    "\015\020\016\023\025\ufff8\033\ufff8\040\ufff8\001\002" });
+    "\024\uffe2\025\uffe2\033\uffe2\040\uffe2\001\002\000\052\002" +
+    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
+    "\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
+    "\uffe4\022\uffe4\024\uffe4\025\uffe4\032\066\033\uffe4\040\uffe4" +
+    "\001\002\000\050\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
+    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1" +
+    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\033" +
+    "\uffe1\040\uffe1\001\002\000\050\002\uffe6\004\uffe6\005\uffe6" +
+    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
+    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6" +
+    "\025\uffe6\033\uffe6\040\uffe6\001\002\000\050\002\uffeb\004" +
+    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
+    "\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
+    "\uffeb\024\063\025\uffeb\033\uffeb\040\uffeb\001\002\000\046" +
+    "\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
+    "\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
+    "\021\uffed\022\uffed\025\uffed\033\uffed\040\uffed\001\002\000" +
+    "\022\023\016\026\020\027\006\030\007\031\011\032\005" +
+    "\036\010\037\012\001\002\000\046\002\uffef\004\uffef\005" +
+    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
+    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\050\025" +
+    "\uffef\033\uffef\040\uffef\001\002\000\002\001\002\000\044" +
+    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
+    "\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\046\020\045" +
+    "\021\044\025\ufff3\033\ufff3\040\ufff3\001\002\000\036\002" +
+    "\ufff6\004\ufff6\005\ufff6\006\034\007\040\010\037\011\032" +
+    "\012\031\013\035\015\033\016\036\025\ufff6\033\ufff6\040" +
+    "\ufff6\001\002\000\016\002\ufffd\004\ufffd\005\027\025\ufffd" +
+    "\033\ufffd\040\ufffd\001\002\000\014\002\uffff\004\025\025" +
+    "\uffff\033\uffff\040\uffff\001\002\000\022\023\016\026\020" +
+    "\027\006\030\007\031\011\032\005\036\010\037\012\001" +
+    "\002\000\012\002\001\025\001\033\001\040\001\001\002" +
+    "\000\022\023\016\026\020\027\006\030\007\031\011\032" +
+    "\005\036\010\037\012\001\002\000\014\002\ufffe\004\ufffe" +
+    "\025\ufffe\033\ufffe\040\ufffe\001\002\000\022\023\016\026" +
+    "\020\027\006\030\007\031\011\032\005\036\010\037\012" +
+    "\001\002\000\022\023\016\026\020\027\006\030\007\031" +
+    "\011\032\005\036\010\037\012\001\002\000\022\023\016" +
+    "\026\020\027\006\030\007\031\011\032\005\036\010\037" +
+    "\012\001\002\000\022\023\016\026\020\027\006\030\007" +
+    "\031\011\032\005\036\010\037\012\001\002\000\022\023" +
+    "\016\026\020\027\006\030\007\031\011\032\005\036\010" +
+    "\037\012\001\002\000\022\023\016\026\020\027\006\030" +
+    "\007\031\011\032\005\036\010\037\012\001\002\000\022" +
+    "\023\016\026\020\027\006\030\007\031\011\032\005\036" +
+    "\010\037\012\001\002\000\022\023\016\026\020\027\006" +
+    "\030\007\031\011\032\005\036\010\037\012\001\002\000" +
+    "\022\002\ufffb\004\ufffb\005\ufffb\015\033\016\036\025\ufffb" +
+    "\033\ufffb\040\ufffb\001\002\000\022\002\ufffa\004\ufffa\005" +
+    "\ufffa\015\033\016\036\025\ufffa\033\ufffa\040\ufffa\001\002" +
+    "\000\044\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
+    "\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\046" +
+    "\020\045\021\044\025\ufff4\033\ufff4\040\ufff4\001\002\000" +
+    "\022\023\016\026\020\027\006\030\007\031\011\032\005" +
+    "\036\010\037\012\001\002\000\022\023\016\026\020\027" +
+    "\006\030\007\031\011\032\005\036\010\037\012\001\002" +
+    "\000\022\023\016\026\020\027\006\030\007\031\011\032" +
+    "\005\036\010\037\012\001\002\000\046\002\ufff2\004\ufff2" +
+    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
+    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\050" +
+    "\025\ufff2\033\ufff2\040\ufff2\001\002\000\022\023\016\026" +
+    "\020\027\006\030\007\031\011\032\005\036\010\037\012" +
+    "\001\002\000\046\002\uffee\004\uffee\005\uffee\006\uffee\007" +
+    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee" +
+    "\017\uffee\020\uffee\021\uffee\022\uffee\025\uffee\033\uffee\040" +
+    "\uffee\001\002\000\046\002\ufff1\004\ufff1\005\ufff1\006\ufff1" +
+    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016" +
+    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\050\025\ufff1\033\ufff1" +
+    "\040\ufff1\001\002\000\046\002\ufff0\004\ufff0\005\ufff0\006" +
+    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0" +
+    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\050\025\ufff0\033" +
+    "\ufff0\040\ufff0\001\002\000\022\002\ufff7\004\ufff7\005\ufff7" +
+    "\015\033\016\036\025\ufff7\033\ufff7\040\ufff7\001\002\000" +
+    "\022\002\ufffc\004\ufffc\005\ufffc\015\033\016\036\025\ufffc" +
+    "\033\ufffc\040\ufffc\001\002\000\044\002\ufff5\004\ufff5\005" +
+    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
+    "\015\ufff5\016\ufff5\017\046\020\045\021\044\025\ufff5\033" +
+    "\ufff5\040\ufff5\001\002\000\022\002\ufff9\004\ufff9\005\ufff9" +
+    "\015\033\016\036\025\ufff9\033\ufff9\040\ufff9\001\002\000" +
+    "\022\002\ufff8\004\ufff8\005\ufff8\015\033\016\036\025\ufff8" +
+    "\033\ufff8\040\ufff8\001\002\000\050\002\uffe9\004\uffe9\005" +
+    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
+    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\024" +
+    "\uffe9\025\uffe9\033\uffe9\040\uffe9\001\002\000\046\002\uffec" +
+    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
+    "\uffec\013\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
+    "\022\uffec\025\uffec\033\uffec\040\uffec\001\002\000\022\023" +
+    "\016\026\020\027\006\030\007\031\011\032\005\036\010" +
+    "\037\012\001\002\000\004\025\065\001\002\000\050\002" +
+    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
+    "\012\uffea\013\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021" +
+    "\uffea\022\uffea\024\uffea\025\uffea\033\uffea\040\uffea\001\002" +
+    "\000\024\023\016\026\020\027\006\030\007\031\011\032" +
+    "\005\033\uffdf\036\010\037\012\001\002\000\004\033\075" +
+    "\001\002\000\006\033\uffdc\040\071\001\002\000\022\023" +
+    "\016\026\020\027\006\030\007\031\011\032\005\036\010" +
+    "\037\012\001\002\000\004\033\uffde\001\002\000\006\033" +
+    "\uffdc\040\071\001\002\000\004\033\uffdd\001\002\000\050" +
+    "\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
+    "\uffe0\012\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
+    "\021\uffe0\022\uffe0\024\uffe0\025\uffe0\033\uffe0\040\uffe0\001" +
+    "\002\000\004\024\uffdb\001\002\000\004\024\102\001\002" +
+    "\000\004\024\uffd9\001\002\000\004\024\uffda\001\002\000" +
+    "\024\023\016\025\103\026\020\027\006\030\007\031\011" +
+    "\032\005\036\010\037\012\001\002\000\050\002\uffe7\004" +
+    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
+    "\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
+    "\uffe7\024\uffe7\025\uffe7\033\uffe7\040\uffe7\001\002\000\004" +
+    "\025\105\001\002\000\050\002\uffe8\004\uffe8\005\uffe8\006" +
+    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8" +
+    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025" +
+    "\uffe8\033\uffe8\040\uffe8\001\002\000\004\033\107\001\002" +
+    "\000\050\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
+    "\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3" +
+    "\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\033\uffe3\040" +
+    "\uffe3\001\002\000\004\002\000\001\002" });
 
   /** Access to parse-action table. */
   public short[][] action_table() {return _action_table;}
@@ -165,40 +189,50 @@
   /** <code>reduce_goto</code> table. */
   protected static final short[][] _reduce_table = 
     unpackFromStrings(new String[] {
-    "\000\105\000\014\006\007\007\006\010\005\011\004\012" +
-    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
+    "\000\106\000\024\006\003\007\023\010\022\011\021\012" +
+    "\020\013\016\014\014\015\013\016\012\001\001\000\002" +
+    "\001\001\000\024\006\105\007\023\010\022\011\021\012" +
+    "\020\013\016\014\014\015\013\016\012\001\001\000\006" +
+    "\002\076\003\075\001\001\000\002\001\001\000\002\001" +
+    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
+    "\000\002\001\001\000\002\001\001\000\010\014\061\015" +
+    "\013\016\012\001\001\000\002\001\001\000\004\017\060" +
     "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
-    "\001\000\014\006\012\007\006\010\005\011\004\012\003" +
-    "\001\001\000\002\001\001\000\012\007\014\010\005\011" +
-    "\004\012\003\001\001\000\002\001\001\000\006\011\106" +
-    "\012\003\001\001\000\006\011\105\012\003\001\001\000" +
-    "\004\012\104\001\001\000\006\011\103\012\003\001\001" +
-    "\000\006\011\102\012\003\001\001\000\004\012\027\001" +
-    "\001\000\006\011\026\012\003\001\001\000\006\011\025" +
-    "\012\003\001\001\000\002\001\001\000\002\001\001\000" +
-    "\002\001\001\000\012\013\101\014\043\015\042\016\041" +
-    "\001\001\000\012\013\100\014\043\015\042\016\041\001" +
-    "\001\000\012\013\044\014\043\015\042\016\041\001\001" +
-    "\000\014\006\076\007\006\010\005\011\004\012\003\001" +
-    "\001\000\006\002\070\003\066\001\001\000\002\001\001" +
-    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
-    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
-    "\001\001\000\010\014\050\015\042\016\041\001\001\000" +
-    "\004\017\047\001\001\000\002\001\001\000\002\001\001" +
-    "\000\010\014\052\015\042\016\041\001\001\000\002\001" +
-    "\001\000\014\006\054\007\006\010\005\011\004\012\003" +
-    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
-    "\060\007\006\010\005\011\004\012\003\020\057\001\001" +
-    "\000\002\001\001\000\004\022\062\001\001\000\014\006" +
-    "\063\007\006\010\005\011\004\012\003\001\001\000\002" +
-    "\001\001\000\004\022\064\001\001\000\002\001\001\000" +
-    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
-    "\001\001\000\002\001\001\000\014\006\074\007\006\010" +
-    "\005\011\004\012\003\001\001\000\002\001\001\000\002" +
+    "\001\000\002\001\001\000\024\006\025\007\023\010\022" +
+    "\011\021\012\020\013\016\014\014\015\013\016\012\001" +
+    "\001\000\002\001\001\000\022\007\027\010\022\011\021" +
+    "\012\020\013\016\014\014\015\013\016\012\001\001\000" +
+    "\002\001\001\000\016\011\057\012\020\013\016\014\014" +
+    "\015\013\016\012\001\001\000\016\011\056\012\020\013" +
+    "\016\014\014\015\013\016\012\001\001\000\014\012\055" +
+    "\013\016\014\014\015\013\016\012\001\001\000\016\011" +
+    "\054\012\020\013\016\014\014\015\013\016\012\001\001" +
+    "\000\016\011\053\012\020\013\016\014\014\015\013\016" +
+    "\012\001\001\000\014\012\042\013\016\014\014\015\013" +
+    "\016\012\001\001\000\016\011\041\012\020\013\016\014" +
+    "\014\015\013\016\012\001\001\000\016\011\040\012\020" +
+    "\013\016\014\014\015\013\016\012\001\001\000\002\001" +
+    "\001\000\002\001\001\000\002\001\001\000\012\013\052" +
+    "\014\014\015\013\016\012\001\001\000\012\013\051\014" +
+    "\014\015\013\016\012\001\001\000\012\013\046\014\014" +
+    "\015\013\016\012\001\001\000\002\001\001\000\010\014" +
+    "\050\015\013\016\012\001\001\000\002\001\001\000\002" +
     "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
     "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
+    "\000\002\001\001\000\002\001\001\000\024\006\063\007" +
+    "\023\010\022\011\021\012\020\013\016\014\014\015\013" +
+    "\016\012\001\001\000\002\001\001\000\002\001\001\000" +
+    "\026\006\067\007\023\010\022\011\021\012\020\013\016" +
+    "\014\014\015\013\016\012\020\066\001\001\000\002\001" +
+    "\001\000\004\022\071\001\001\000\024\006\072\007\023" +
+    "\010\022\011\021\012\020\013\016\014\014\015\013\016" +
+    "\012\001\001\000\002\001\001\000\004\022\073\001\001" +
     "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
-    "\002\001\001" });
+    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
+    "\006\103\007\023\010\022\011\021\012\020\013\016\014" +
+    "\014\015\013\016\012\001\001\000\002\001\001\000\002" +
+    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
+    "\001\000\002\001\001" });
 
   /** Access to <code>reduce_goto</code> table. */
   public short[][] reduce_table() {return _reduce_table;}
@@ -497,7 +531,17 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 18: // Exp5 ::= Exp5 POT Exp6 
+          case 18: // Exp4 ::= Exp5 
+            {
+              E RESULT =null;
+		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
+		RESULT=op1;
+              CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
+            }
+          return CUP$ConstructAST$result;
+
+          /*. . . . . . . . . . . . . . . . . . . .*/
+          case 19: // Exp5 ::= Exp5 POT Exp6 
             {
               E RESULT =null;
 		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
@@ -509,7 +553,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 19: // Exp5 ::= Exp6 
+          case 20: // Exp5 ::= Exp6 
             {
               E RESULT =null;
 		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
@@ -519,7 +563,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 20: // Exp6 ::= NOT Exp6 
+          case 21: // Exp6 ::= NOT Exp6 
             {
               E RESULT =null;
 		TokenValue not = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
@@ -530,7 +574,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 21: // Exp6 ::= Exp7 
+          case 22: // Exp6 ::= Exp7 
             {
               E RESULT =null;
 		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
@@ -540,7 +584,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 22: // Exp7 ::= Exp7 COR_A Exp0 COR_C 
+          case 23: // Exp7 ::= Exp7 COR_A Exp0 COR_C 
             {
               E RESULT =null;
 		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;
@@ -552,7 +596,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 23: // Exp7 ::= PUNTERO Exp9 
+          case 24: // Exp7 ::= PUNTERO Exp9 
             {
               E RESULT =null;
 		TokenValue punt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
@@ -563,7 +607,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 24: // Exp7 ::= NEW TIPO COR_A Exp0 COR_C 
+          case 25: // Exp7 ::= NEW TIPO COR_A Exp0 COR_C 
             {
               E RESULT =null;
 		TokenValue nuevo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-4)).value;
@@ -575,20 +619,20 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 25: // Exp7 ::= NEW TIPO COR_A COR_C 
+          case 26: // Exp7 ::= NEW TIPO COR_A COR_C 
             {
               E RESULT =null;
 		TokenValue nuevo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;
 		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-2)).value;
 		RESULT = as.nuevo(
-   tipo, as.ent("1", nuevo.getFila(), nuevo.getColumna()), 
+   tipo, as.ent("1", nuevo.getFila(), nuevo.getColumna()),
    nuevo.getFila(), nuevo.getColumna());
               CUP$ConstructAST$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
             }
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 26: // Exp7 ::= Exp8 
+          case 27: // Exp7 ::= Exp8 
             {
               E RESULT =null;
 		E op1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
@@ -598,7 +642,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 27: // Exp8 ::= ENT 
+          case 28: // Exp8 ::= ENT 
             {
               E RESULT =null;
 		TokenValue e1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
@@ -608,7 +652,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 28: // Exp8 ::= IDEN 
+          case 29: // Exp8 ::= IDEN 
             {
               E RESULT =null;
 		TokenValue e1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
@@ -618,7 +662,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 29: // Exp8 ::= PAREN_A Exp0 PAREN_C 
+          case 30: // Exp8 ::= PAREN_A Exp0 PAREN_C 
             {
               E RESULT =null;
 		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
@@ -628,7 +672,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 30: // Exp8 ::= TRUE 
+          case 31: // Exp8 ::= TRUE 
             {
               E RESULT =null;
 		TokenValue tru = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
@@ -638,7 +682,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 31: // Exp8 ::= FALSE 
+          case 32: // Exp8 ::= FALSE 
             {
               E RESULT =null;
 		TokenValue fal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
@@ -648,7 +692,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 32: // Exp8 ::= IDEN PAREN_A LIST_ARG PAREN_C 
+          case 33: // Exp8 ::= IDEN PAREN_A LIST_ARG PAREN_C 
             {
               E RESULT =null;
 		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;
@@ -660,7 +704,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 33: // LIST_ARG ::= 
+          case 34: // LIST_ARG ::= 
             {
               List<E> RESULT =null;
 		RESULT=new ArrayList<E>();
@@ -669,7 +713,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 34: // LIST_ARG ::= Exp0 ARG 
+          case 35: // LIST_ARG ::= Exp0 ARG 
             {
               List<E> RESULT =null;
 		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
@@ -680,7 +724,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 35: // ARG ::= COMA Exp0 ARG 
+          case 36: // ARG ::= COMA Exp0 ARG 
             {
               List<E> RESULT =null;
 		E e1 = (E)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-1)).value;
@@ -691,7 +735,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 36: // ARG ::= 
+          case 37: // ARG ::= 
             {
               List<E> RESULT =null;
 		RESULT=new ArrayList<E>();
@@ -700,7 +744,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 37: // TIPO ::= TIPO_BASICO 
+          case 38: // TIPO ::= TIPO_BASICO 
             {
               Tipo RESULT =null;
 		Tipo tipoBasico = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
@@ -710,7 +754,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 38: // TIPO_BASICO ::= INT 
+          case 39: // TIPO_BASICO ::= INT 
             {
               Tipo RESULT =null;
 		TokenValue tipoBasico = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
@@ -720,7 +764,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 39: // TIPO_BASICO ::= BOOLEAN 
+          case 40: // TIPO_BASICO ::= BOOLEAN 
             {
               Tipo RESULT =null;
 		TokenValue tipoBasico = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.peek()).value;
@@ -730,7 +774,7 @@
           return CUP$ConstructAST$result;
 
           /*. . . . . . . . . . . . . . . . . . . .*/
-          case 40: // TIPO_ARRAY ::= COR_A Exp0 COR_C TIPO_ARRAY 
+          case 41: // TIPO_ARRAY ::= COR_A Exp0 COR_C TIPO_ARRAY 
             {
               Tipo RESULT =null;
 		TokenValue ca = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructAST$stack.elementAt(CUP$ConstructAST$top-3)).value;
Index: bin/constructorast/ConstructorAST.cup
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package constructorast;\r\n\r\nimport java_cup.runtime.*;\r\nimport alex.AnalizadorLexico;\r\nimport alex.UnidadLexica;\r\nimport alex.TokenValue;\r\nimport errors.GestionErrores;\r\nimport ast.E.*;\r\nimport ast.T.*;\r\nimport ast.AS;\r\n\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\n\r\nscan with {: return getScanner().next_token(); :};\r\naction code {:\r\n   private AS as = new AS();\r\n:};\r\nparser code {: \r\n   private GestionErrores errores;\r\n   public void syntax_error(Symbol unidadLexica) {\r\n     errores.errorSintactico((UnidadLexica)unidadLexica);\r\n   }\r\n:};\r\ninit with {: \r\n   errores = new GestionErrores();\r\n   AnalizadorLexico alex = (AnalizadorLexico)getScanner();\r\n   alex.fijaGestionErrores(errores);\r\n:};\r\n\r\n//1)Terminales y no terminales\r\n//1.1)Terminales\r\nterminal TokenValue OR, AND, IGUALIGUAL, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, DISTINTO, IGUAL,\r\nMAS, MENOS, POR, DIV, MOD, POT, NOT, COR_A, COR_C, PUNTERO, NEW,\r\nENT, IDEN, PAREN_A, PAREN_C, LLAVE_A, LLAVE_C,\r\nTRUE, FALSE, COMA, PUNTOCOMA, \r\nINT, BOOLEAN, IF, ELSE, RETURN, WHILE, SWITCH, CASE, DEFAULT,\r\nCONST, STRUCT, VOID;\r\n\r\n//1.2)No terminales\r\nnon terminal Tipo TIPO, TIPO_BASICO, TIPO_PUNTERO, TIPO_ARRAY; \r\nnon terminal E Exp0, Exp1, Exp2, Exp3, Exp4, Exp5, Exp6, Exp7, Exp8, Exp9;\r\nnon terminal List<E> LIST_ARG, CON_ARG, ARG, LIST_VAL, INIT_LIST_VAL;\r\n\r\n\r\n\r\n//3) Gramatica de expresiones (ordenada por precedencia de operadores de menos a más)\r\n\r\n//3.1) Operadores logicos\r\n//OR\r\nExp0 ::= Exp1: op1 OR:or Exp0: op2\r\n   {:RESULT = as.or(op1, op2, or.getFila(), or.getColumna()); :};\r\nExp0 ::= Exp1: op1\r\n   {:RESULT = op1; :};\r\n\r\n//AND\r\nExp1 ::= Exp2:op1 AND:and Exp1:op2\r\n   {:RESULT=as.and(op1, op2, and.getFila(), and.getColumna()); :};\r\nExp1 ::= Exp2: op1\r\n   {:RESULT = op1; :};\r\n\r\n\r\n\r\n//3.2) Operadores comparativos\r\n// ==\r\nExp2 ::= Exp3:op1 IGUALIGUAL:ig Exp3:op2 \r\n\t{:RESULT = as.igualIgual(op1, op2, ig.getFila(), ig.getColumna()); :};\r\n\r\n// >\r\nExp2 ::= Exp3:op1 MAYOR: ma Exp3:op2\r\n\t{:RESULT = as.mayor(op1, op2, ma.getFila(), ma.getColumna()); :}; \r\n\r\n// <\r\nExp2 ::= Exp3:op1 MENOR: me Exp3:op2 \r\n\t{:RESULT = as.menor(op1, op2, me.getFila(), me.getColumna()); :}; \r\n\r\n// >=\r\nExp2::= Exp3:op1 MAYORIGUAL: mi Exp3:op2\r\n\t{:RESULT = as.mayorIgual(op1, op2, mi.getFila(), mi.getColumna()); :}; \r\n\r\n// <=\r\nExp2::= Exp3:op1 MENORIGUAL: mi Exp3:op2\r\n\t{:RESULT = as.menorIgual(op1, op2, mi.getFila(), mi.getColumna()); :}; \r\n\r\n// !=\r\nExp2 ::= Exp3:op1 DISTINTO: dist Exp3:op2\r\n\t{:RESULT = as.distinto(op1, op2, dist.getFila(), dist.getColumna()); :}; \r\n\r\nExp2 ::= Exp3: op\r\n   {:RESULT = op; :};\r\n\r\n\r\n//3.3) Operadores aritmeticos\r\n\r\n//3.3.1) Suma y resta\r\n//+\r\nExp3 ::= Exp3:op1 MAS:mas Exp4:op2\r\n   {:RESULT=as.suma(op1, op2, mas.getFila(), mas.getColumna()); :};\r\n\r\n//-\r\nExp3 ::= Exp3:op1 MENOS:menos Exp4:op2\r\n   {:RESULT=as.resta(op1, op2, menos.getFila(), menos.getColumna()); :};\r\n\r\nExp3 ::= Exp4:op1\r\n   {:RESULT=op1; :};\r\n\r\n\r\n\r\n//3.3.2) Multiplicacion, division y modulo\r\n//*\r\nExp4 ::= Exp4:op1 POR:por Exp5:op2\r\n   {:RESULT=as.mul(op1, op2, por.getFila(), por.getColumna()); :};\r\n\r\n// /\r\nExp4 ::= Exp4:op1 DIV:div Exp5:op2\r\n   {:RESULT=as.div(op1, op2, div.getFila(), div.getColumna()); :};\r\n\r\nExp4 ::= Exp4 :op1 MOD:mod Exp5:op2\r\n   {:RESULT=as.mod(op1, op2, mod.getFila(), mod.getColumna()); :};\r\n\r\n\r\n//3.3.3) Potencia\r\nExp5 ::= Exp5:e1 POT:pot Exp6:e2\r\n{:RESULT=as.pot(e1, e2, pot.getFila(), pot.getColumna());:};\r\nExp5 ::= Exp6:e1\r\n{:RESULT=e1;:};\r\n\r\n//3.4) Negación\r\nExp6 ::= NOT:not Exp6:e1\r\n{:RESULT=as.not(e1, not.getFila(), not.getColumna());:};\r\nExp6 ::= Exp7:e1\r\n{:RESULT=e1;:};\r\n\r\n//3.5) Corchete, asterisco y new \r\nExp7 ::= Exp7:e1 COR_A:ca Exp0:e2 COR_C\r\n{:RESULT=as.corchete(e1, e2, ca.getFila(), ca.getColumna());:};\r\n\r\nExp7  ::= PUNTERO:punt Exp9:op1\r\n{:RESULT = as.dolar(op1, punt.getFila(), punt.getColumna());:};\r\nExp7\t::= NEW:nuevo TIPO:tipo COR_A Exp0:tam COR_C\r\n{:RESULT = as.nuevo(tipo, tam, nuevo.getFila(), nuevo.getColumna());:};\r\nExp7\t::= NEW:nuevo TIPO:tipo COR_A COR_C\r\n{:RESULT = as.nuevo(\r\n   tipo, as.ent(\"1\", nuevo.getFila(), nuevo.getColumna()), \r\n   nuevo.getFila(), nuevo.getColumna());:};\r\nExp7  ::= Exp8:op1\r\n{:RESULT=op1;:};\r\n\r\n//3.6) Terminales \r\nExp8  ::= ENT:e1\r\n{:RESULT=as.ent(e1.getLexema(), e1.getFila(), e1.getColumna());:};\r\nExp8  ::= IDEN:e1\r\n{:RESULT=as.iden(e1.getLexema(), e1.getFila(), e1.getColumna());:};\r\nExp8  ::= PAREN_A Exp0:e1 PAREN_C\r\n{:RESULT=e1;:};\r\nExp8  ::= TRUE:tru\r\n{:RESULT=as.verdadero(tru.getFila(), tru.getColumna());:};\r\nExp8  ::= FALSE:fal\r\n{:RESULT=as.falso(fal.getFila(), fal.getColumna());:};\r\n\r\n//3.7)Llamada a funcion como expresion\r\nExp8  ::= IDEN:id PAREN_A LIST_ARG:args PAREN_C:pc\r\n{:RESULT=as.llamadaFuncion(as.iden(id.getLexema(), id.getFila(), id.getColumna()), args, pc.getFila(), pc.getColumna());:};\r\n//Sin argumentos\r\nLIST_ARG ::=\r\n{:RESULT=new ArrayList<E>();:};\r\n//Con argumentos\r\nLIST_ARG ::= Exp0:e1 ARG:e2\r\n{:e2.add(0, e1); RESULT=e2;:};\r\nARG ::= COMA Exp0:e1 ARG:e2\r\n{:e2.add(0, e1); RESULT=e2;:};\r\nARG ::= \r\n{:RESULT=new ArrayList<E>();:};\r\n\r\n//4) Tipos\r\n\r\n//4.1) Tipos simples\r\nTIPO ::= TIPO_BASICO: tipoBasico\r\n   {:RESULT = tipoBasico; :};\r\n\r\n//INT\r\nTIPO_BASICO ::= INT: tipoBasico\r\n   {:RESULT = new TipoInt();:};\r\n\r\n//BOOL\r\nTIPO_BASICO ::= BOOLEAN: tipoBasico\r\n   {:RESULT = new TipoBoolean(); :};\r\n\r\n//4.3)Tipos arrays \r\nTIPO_ARRAY ::= COR_A:ca Exp0:dimension COR_C TIPO_ARRAY:tipoArray\r\n{:RESULT = new TipoArray(tipoArray, dimension, ca.getFila(), ca.getColumna());:};\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bin/constructorast/ConstructorAST.cup b/bin/constructorast/ConstructorAST.cup
--- a/bin/constructorast/ConstructorAST.cup	(revision ef64d08a3a5810111f9703a2afc7d1ed9b72c1ae)
+++ b/bin/constructorast/ConstructorAST.cup	(date 1618338512218)
@@ -63,28 +63,28 @@
 
 //3.2) Operadores comparativos
 // ==
-Exp2 ::= Exp3:op1 IGUALIGUAL:ig Exp3:op2 
+Exp2 ::= Exp3:op1 IGUALIGUAL:ig Exp3:op2
 	{:RESULT = as.igualIgual(op1, op2, ig.getFila(), ig.getColumna()); :};
 
 // >
 Exp2 ::= Exp3:op1 MAYOR: ma Exp3:op2
-	{:RESULT = as.mayor(op1, op2, ma.getFila(), ma.getColumna()); :}; 
+	{:RESULT = as.mayor(op1, op2, ma.getFila(), ma.getColumna()); :};
 
 // <
-Exp2 ::= Exp3:op1 MENOR: me Exp3:op2 
-	{:RESULT = as.menor(op1, op2, me.getFila(), me.getColumna()); :}; 
+Exp2 ::= Exp3:op1 MENOR: me Exp3:op2
+	{:RESULT = as.menor(op1, op2, me.getFila(), me.getColumna()); :};
 
 // >=
 Exp2::= Exp3:op1 MAYORIGUAL: mi Exp3:op2
-	{:RESULT = as.mayorIgual(op1, op2, mi.getFila(), mi.getColumna()); :}; 
+	{:RESULT = as.mayorIgual(op1, op2, mi.getFila(), mi.getColumna()); :};
 
 // <=
 Exp2::= Exp3:op1 MENORIGUAL: mi Exp3:op2
-	{:RESULT = as.menorIgual(op1, op2, mi.getFila(), mi.getColumna()); :}; 
+	{:RESULT = as.menorIgual(op1, op2, mi.getFila(), mi.getColumna()); :};
 
 // !=
 Exp2 ::= Exp3:op1 DISTINTO: dist Exp3:op2
-	{:RESULT = as.distinto(op1, op2, dist.getFila(), dist.getColumna()); :}; 
+	{:RESULT = as.distinto(op1, op2, dist.getFila(), dist.getColumna()); :};
 
 Exp2 ::= Exp3: op
    {:RESULT = op; :};
@@ -118,6 +118,8 @@
 Exp4 ::= Exp4 :op1 MOD:mod Exp5:op2
    {:RESULT=as.mod(op1, op2, mod.getFila(), mod.getColumna()); :};
 
+Exp4  ::= Exp5:op1
+    {:RESULT=op1;:};
 
 //3.3.3) Potencia
 Exp5 ::= Exp5:e1 POT:pot Exp6:e2
@@ -131,7 +133,7 @@
 Exp6 ::= Exp7:e1
 {:RESULT=e1;:};
 
-//3.5) Corchete, asterisco y new 
+//3.5) Corchete, asterisco y new
 Exp7 ::= Exp7:e1 COR_A:ca Exp0:e2 COR_C
 {:RESULT=as.corchete(e1, e2, ca.getFila(), ca.getColumna());:};
 
@@ -141,7 +143,7 @@
 {:RESULT = as.nuevo(tipo, tam, nuevo.getFila(), nuevo.getColumna());:};
 Exp7	::= NEW:nuevo TIPO:tipo COR_A COR_C
 {:RESULT = as.nuevo(
-   tipo, as.ent("1", nuevo.getFila(), nuevo.getColumna()), 
+   tipo, as.ent("1", nuevo.getFila(), nuevo.getColumna()),
    nuevo.getFila(), nuevo.getColumna());:};
 Exp7  ::= Exp8:op1
 {:RESULT=op1;:};
Index: practicaFinal.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" name=\"practicaFinal\" level=\"project\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/practicaFinal.iml b/practicaFinal.iml
--- a/practicaFinal.iml	(revision ef64d08a3a5810111f9703a2afc7d1ed9b72c1ae)
+++ b/practicaFinal.iml	(date 1618337101352)
@@ -8,5 +8,23 @@
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" name="practicaFinal" level="project" />
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$MODULE_DIR$/cup.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$MODULE_DIR$/jlex.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
   </component>
 </module>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"35f354fc-e5b1-480b-b515-0f6d348dd7e1\" name=\"Default Changelist\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1qfj1P83FtGFU3LcEeCfjHZFXQk\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"35f354fc-e5b1-480b-b515-0f6d348dd7e1\" name=\"Default Changelist\" comment=\"\" />\n      <created>1617477325251</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1617477325251</updated>\n      <workItem from=\"1617477328683\" duration=\"28000\" />\n      <workItem from=\"1617782197724\" duration=\"115000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ef64d08a3a5810111f9703a2afc7d1ed9b72c1ae)
+++ b/.idea/workspace.xml	(date 1618338103260)
@@ -1,7 +1,16 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="35f354fc-e5b1-480b-b515-0f6d348dd7e1" name="Default Changelist" comment="" />
+    <list default="true" id="35f354fc-e5b1-480b-b515-0f6d348dd7e1" name="Default Changelist" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/constructorast/ConstructorAST.cup" beforeDir="false" afterPath="$PROJECT_DIR$/bin/constructorast/ConstructorAST.cup" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/practicaFinal.iml" beforeDir="false" afterPath="$PROJECT_DIR$/practicaFinal.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pruebasVarias.txt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/constructorast/ClaseLexica.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/constructorast/ClaseLexica.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/constructorast/ConstructAST.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/constructorast/ConstructAST.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/constructorast/ConstructorAST.cup" beforeDir="false" afterPath="$PROJECT_DIR$/src/constructorast/ConstructorAST.cup" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/test/expresiones.txt" beforeDir="false" afterPath="$PROJECT_DIR$/test/expresiones.txt" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -21,6 +30,26 @@
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
     <property name="aspect.path.notification.shown" value="true" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
+    <property name="project.structure.last.edited" value="Modules" />
+    <property name="project.structure.proportion" value="0.0" />
+    <property name="project.structure.side.proportion" value="0.0" />
+  </component>
+  <component name="RunManager">
+    <configuration name="Main" type="Application" factoryName="Application" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="constructorast.Main" />
+      <module name="practicaFinal" />
+      <option name="PROGRAM_PARAMETERS" value="test/expresiones.txt" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="constructorast.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
